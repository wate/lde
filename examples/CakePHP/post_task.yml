---
- name: allow xdebug port
  ufw:
    rule: allow
    port: "9000"
    proto: tcp
- name: remove default install index file
  ansible.builtin.file:
    path: /var/www/html/{{ item }}
    state: absent
  loop:
    - index.html
    - index.nginx-debian.html
- name: check exists bash completion setting directory
  ansible.builtin.stat:
    path: /etc/bash_completion.d
  register: bash_completion_dir_result
- name: create bash completion setting
  ansible.builtin.copy:
    src: "{{ post_task_base_dir }}/files/cake"
    dest: /etc/bash_completion.d/cake
    mode: "0644"
  when: bash_completion_dir_result.stat.exists
- name: create CakePHP tomprary directory
  ansible.builtin.file:
    path: /var/log/cake/{{ item }}
    state: directory
    mode: "0777"
  loop:
    - tmp/cache
    - tmp/session
    - tmp/tests
    - logs
- block:
    - name: set variable
      ansible.builtin.set_fact:
        tmp_project_dir: /tmp/php_project
        lde_source_code_dir: /vagrant/src
    - name: remove dummy file
      ansible.builtin.file:
        path: "{{ lde_source_code_dir }}/.gitkeep"
        state: absent
    - name: check exists composer.json
      ansible.builtin.stat:
        path: "{{ lde_source_code_dir }}/composer.json"
      register: composer_json_result
    - name: remove temporary project directory
      ansible.builtin.file:
        path: "{{ tmp_project_dir }}"
        state: absent
    - name: create cakephp project
      block:
        - name: create temporary cakephp project
          community.general.composer:
            command: create-project
            arguments: '"cakephp/app:^{{ cake_version | default(4) | string }}" {{ tmp_project_dir }}'
            no_dev: false
            prefer_dist: true
            working_dir: /tmp
      when: not composer_json_result.stat.exists
    - name: create cakephp project
      block:
        - name: create temporary project directory
          ansible.builtin.file:
            path: "{{ tmp_project_dir }}"
            state: directory
        - name: synchronize project files(shard directory => working directory)
          ansible.posix.synchronize:
            src: "{{ lde_source_code_dir }}/"
            dest: "{{ tmp_project_dir }}"
            rsync_opts:
              - "--exclude=.git"
              - "--exclude=tmp"
              - "--exclude=logs"
          delegate_to: "{{ inventory_hostname }}"
        - name: install php dependency packages
          community.general.composer:
            command: install
            no_dev: false
            working_dir: "{{ tmp_project_dir }}"
      when: composer_json_result.stat.exists
    - name: add php project dependency packages
      community.general.composer:
        command: require
        arguments: "{{ item.name }}"
        no_dev: "{{ item.dev | default(false) | ternary(false, true) }}"
        working_dir: "{{ tmp_project_dir }}"
      loop: "{{ cake_project_addtitinal_packages | default([]) }}"
    - name: setup localized plugin setting
      ansible.builtin.include_tasks: "{{ post_task_base_dir }}/tasks/localized.yml"
      vars:
        project_dir: "{{ tmp_project_dir }}"
    - name: setup Cakelte plugin setting
      ansible.builtin.include_tasks: "{{ post_task_base_dir }}/tasks/cakelte.yml"
      vars:
        project_dir: "{{ tmp_project_dir }}"
    - name: setup tcpdf font files
      ansible.builtin.include_tasks: "{{ post_task_base_dir }}/tasks/tcpdf.yml"
      vars:
        project_dir: "{{ tmp_project_dir }}"
    - name: synchronize project files(working directory => shard directory)
      ansible.posix.synchronize:
        src: "{{ tmp_project_dir }}/"
        dest: "{{ lde_source_code_dir }}"
      delegate_to: "{{ inventory_hostname }}"
    - name: remove temporary project directory
      ansible.builtin.file:
        path: "{{ tmp_project_dir }}"
        state: absent
    - name: regenerate dummy file
      ansible.builtin.file:
        path: "{{ lde_source_code_dir }}/.gitkeep"
        state: touch
    - name: set variables
      ansible.builtin.set_fact:
        dot_envrc_value: |
          layout php
          layout node
          PATH_add bin
          source_env_if_exists .env
        dot_env_value: |
          export APP_DEFAULT_LOCALE="ja_JP"
          export APP_DEFAULT_TIMEZONE="Asia/Tokyo"
          export DATABASE_URL="mysql://app_dev:app_dev_P455w0rd@localhost/app_dev?encoding=utf8&timezone=UTC&cacheMetadata=true&quoteIdentifiers=false&persistent=false"
          export DATABASE_TEST_URL="mysql://app_test:app_test_P455w0rd@localhost/app_test?encoding=utf8&timezone=UTC&cacheMetadata=true&quoteIdentifiers=false&persistent=false"
          export LOG_DEBUG_URL=file:///var/log/cake/logs/
          export LOG_ERROR_URL=file:///var/log/cake/logs/
          export LOG_QUERIES_URL=file:///var/log/cake/logs/
          export CACHE_DEFAULT_URL=redis://localhost
          export CACHE_CAKECORE_URL=redis://localhost
          export CACHE_CAKEMODEL_URL=redis://localhost
          export CACHE_CAKEROUTES_URL=redis://localhost
    - name: create direnv setting
      ansible.builtin.blockinfile:
        path: "{{ lde_source_code_dir }}/.envrc"
        create: true
        block: "{{ dot_envrc_value }}"
    - name: add .gitignore direnv setting file
      ansible.builtin.lineinfile:
        path: "{{ lde_source_code_dir }}/.gitignore"
        line: .envrc
    - name: display direnv setting
      ansible.builtin.debug:
        msg: |
          自動生成したdirenvの設定(.envrc)は以下の通りです
          ```
          {{ dot_envrc_value -}}
          ```
    - name: create CakePHP setting
      ansible.builtin.blockinfile:
        path: "{{ lde_source_code_dir }}/config/.env"
        create: true
        block: "{{ dot_env_value }}"
    - name: display direnv setting
      ansible.builtin.debug:
        msg: |
          自動生成したCakePHPの設定(config/.env)は以下の通りです
          ```
          {{ dot_env_value -}}
          ```
  become: false

---
- name: allow xdebug port
  community.general.ufw:
    rule: allow
    port: "9000"
    proto: tcp
- name: remove default install index file
  ansible.builtin.file:
    path: /var/www/html/{{ item }}
    state: absent
  loop:
    - index.html
    - index.nginx-debian.html
- name: check exists bash completion setting directory
  ansible.builtin.stat:
    path: /etc/bash_completion.d
  register: bash_completion_dir_result
- name: create bash completion setting
  ansible.builtin.blockinfile:
    path: /etc/bash_completion.d/cake
    create: true
    block: |
      #
      # Bash completion file for CakePHP console
      # https://book.cakephp.org/4/ja/console-commands/completion.html
      _cake()
      {
          local cur prev opts cake
          COMPREPLY=()
          cake="${COMP_WORDS[0]}"
          cur="${COMP_WORDS[COMP_CWORD]}"
          prev="${COMP_WORDS[COMP_CWORD-1]}"
          if [[ "$cur" == -* ]] ; then
              if [[ ${COMP_CWORD} = 1 ]] ; then
                  opts=$(${cake} Completion options)
              elif [[ ${COMP_CWORD} = 2 ]] ; then
                  opts=$(${cake} Completion options "${COMP_WORDS[1]}")
              else
                  opts=$(${cake} Completion options "${COMP_WORDS[1]}" "${COMP_WORDS[2]}")
              fi
              COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
              return 0
          fi
          if [[ ${COMP_CWORD} = 1 ]] ; then
              opts=$(${cake} Completion commands)
              COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
              return 0
          fi
          if [[ ${COMP_CWORD} = 2 ]] ; then
              opts=$(${cake} Completion subcommands $prev)
              COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
              if [[ $COMPREPLY = "" ]] ; then
                  _filedir
                  return 0
              fi
              return 0
          fi
          opts=$(${cake} Completion fuzzy "${COMP_WORDS[@]:1}")
          COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
          if [[ $COMPREPLY = "" ]] ; then
              _filedir
              return 0
          fi
          return 0;
      }
      complete -F _cake cake bin/cake
  when: bash_completion_dir_result.stat.exists
- name: create CakePHP tomprary directory
  ansible.builtin.file:
    path: /var/log/cake/{{ item }}
    state: directory
    mode: "0755"
  loop:
    - tmp/cache
    - tmp/session
    - tmp/tests
    - logs
- block:
    - name: set variable
      ansible.builtin.set_fact:
        tmp_project_dir: /tmp/cake_project
    - name: remove dummy file
      ansible.builtin.file:
        path: /vagrant/src/.gitkeep
        state: absent
    - name: check exists composer.json
      ansible.builtin.stat:
        path: /vagrant/src/composer.json
      register: composer_json_result
    - name: remove temporary project directory
      ansible.builtin.file:
        path: "{{ tmp_project_dir }}"
        state: absent
    - name: create cakephp project
      block:
        - name: create temporary cakephp project
          community.general.composer:
            command: create-project
            arguments: '"cakephp/app:^{{ cake_version | default(4) | string }}" cake_project'
            no_dev: false
            prefer_dist: true
            working_dir: /tmp
      when: not composer_json_result.stat.exists
    - name: create cakephp project
      block:
        - name: create temporary project directory
          ansible.builtin.file:
            path: "{{ tmp_project_dir }}"
            state: directory
        - name: synchronize project files(shard directory => working directory)
          ansible.posix.synchronize:
            src: /vagrant/src/
            dest: "{{ tmp_project_dir }}"
          delegate_to: "{{ inventory_hostname }}"
        - name: install php dependency packages
          community.general.composer:
            command: install
            no_dev: false
            working_dir: "{{ tmp_project_dir }}"
      when: composer_json_result.stat.exists
    - name: add php project dependency packages
      community.general.composer:
        command: require
        arguments: "{{ item.name }}"
        no_dev: "{{ item.dev | default(false) | ternary(false, true) }}"
        working_dir: "{{ tmp_project_dir }}"
      loop: "{{ cake_project_addtitinal_packages | default([]) }}"
    - name: check exists Cakelte
      ansible.builtin.stat:
        path: "{{ tmp_project_dir }}/vendor/arodu/cakelte"
      register: cakelte_result
    - name: set Cakelte setting
      block:
        - name: load plugin setting
          ansible.builtin.lineinfile:
            path: "{{ tmp_project_dir }}/src/Application.php"
            regexp: "this->addPlugin\\('CakeLte'\\)"
            line: "        $this->addPlugin('CakeLte');"
            insertafter: "^\\s+parent::bootstrap\\(\\);"
        - name: load CakeLteTrait(1)
          ansible.builtin.lineinfile:
            path: "{{ tmp_project_dir }}/src/View/AppView.php"
            line: 'use CakeLte\View\CakeLteTrait;'
            insertafter: '^use Cake\\View\\View;'
        - name: load CakeLteTrait(2)
          ansible.builtin.lineinfile:
            path: "{{ tmp_project_dir }}/src/View/AppView.php"
            line: '    use CakeLteTrait;'
            insertafter: "^\\{"
        - name: change default layout
          ansible.builtin.lineinfile:
            path: "{{ tmp_project_dir }}/src/View/AppView.php"
            line: "    public $layout = 'CakeLte.default';"
            insertafter: "^\\s+use CakeLteTrait;"
        - name: add parent::initialize() statement
          ansible.builtin.lineinfile:
            path: "{{ tmp_project_dir }}/src/View/AppView.php"
            line: "        parent::initialize();"
            insertafter: "^\\s+{"
        - name: add CakeLte::initializeCakeLte() statement
          ansible.builtin.lineinfile:
            path: "{{ tmp_project_dir }}/src/View/AppView.php"
            line: "        $this->initializeCakeLte($options = []);"
            insertafter: "^\\s+parent::initialize\\(\\);"
        - name: check exists plugin template directory
          ansible.builtin.stat:
            path: "{{ tmp_project_dir }}/templates/plugin/CakeLte"
          register: plugin_template_dir_result
        - block:
            - name: create plugin template directory
              ansible.builtin.file:
                path: "{{ tmp_project_dir }}/templates/plugin/CakeLte/{{ item }}"
                state: directory
              loop:
                - layout
                - element/content
                - element/header
                - element/footer
                - element/sidebar
                - element/aside
            - name: copy CakeLte template files
              ansible.builtin.copy:
                src: "{{ tmp_project_dir }}/vendor/arodu/cakelte/templates/{{ item }}"
                dest: "{{ tmp_project_dir }}/templates/plugin/CakeLte/{{ item }}"
                remote_src: true
              loop:
                # Layouts
                - layout/default.php
                - layout/login.php
                - layout/top-nav.php
                # Content
                - element/content/header.php
                # Header navbar
                - element/header/main.php
                - element/header/menu.php
                - element/header/messages.php
                - element/header/notifications.php
                - element/header/search-default.php
                - element/header/search-block.php
                # Footer
                - element/footer/main.php
                # Left sidebar
                - element/sidebar/main.php
                - element/sidebar/menu.php
                - element/sidebar/search.php
                - element/sidebar/user.php
                # Right sidebar
                - element/aside/main.php
          when: not plugin_template_dir_result.stat.exists
      when: cakelte_result.stat.exists
    - name: check exists tcpdf
      ansible.builtin.stat:
        path: "{{ tmp_project_dir }}/vendor/tecnickcom/tcpdf"
      register: tcpdf_result
    - name: generate tcpdf font files
      block:
        - name: create fonts directory
          ansible.builtin.file:
            path: "{{ tmp_project_dir }}/resources/fonts"
            state: directory
          register: resource_font_dir_result
        - block:
            - block:
                - name: install fontforge
                  ansible.builtin.apt:
                    name: fontforge
                - name: get ttc to ttf convert script
                  ansible.builtin.get_url:
                    url: https://gist.githubusercontent.com/lilydjwg/8877450/raw/e834ec4e08b1ce195fd38b157fcf62e565370a68/ttc2ttf
                    dest: /usr/local/bin/ttc2ttf
                    mode: '0755'
              become: true
            - name: synchronize tcpdf original font files
              ansible.posix.synchronize:
                src: "{{ tmp_project_dir }}/vendor/tecnickcom/tcpdf/fonts/"
                dest: "{{ tmp_project_dir }}/resources/fonts"
              delegate_to: "{{ inventory_hostname }}"
            - name: find ttc files
              ansible.builtin.find:
                paths: /usr/share/fonts/opentype/noto
                patterns:
                  - '*.ttc'
              register: find_result
            - name: set variables
              ansible.builtin.set_fact:
                ttc_files: "{{ find_result.files | map(attribute='path') | list }}"
                ttf_output_dir: "{{ ttf_output_dir | default('/tmp/fonts') }}"
            - name: create ttf file output directory
              ansible.builtin.file:
                path: "{{ ttf_output_dir }}"
                state: directory
                mode: '0750'
            - name: convert ttc to ttf
              ansible.builtin.command: /usr/bin/fontforge -lang=py -script /usr/local/bin/ttc2ttf {{ item }}
              args:
                chdir: "{{ ttf_output_dir }}"
              register: fontforge_result
              failed_when: fontforge_result['rc'] != -9
              loop: "{{ ttc_files }}"
            - name: find all ttf files
              ansible.builtin.find:
                paths:
                  - /usr/share/fonts/opentype/ipaexfont-gothic
                  - /usr/share/fonts/opentype/ipaexfont-gothic
                  - /usr/share/fonts/opentype/ipafont-gothic
                  - /usr/share/fonts/opentype/ipafont-mincho
                  - /usr/local/share/fonts/morisawa-biz-ud-gothic
                  - "{{ ttf_output_dir }}"
                patterns:
                  - '*.ttf'
              register: find_result
            - name: generate tcpdf font file
              ansible.builtin.command:
                vendor/tecnickcom/tcpdf/tools/tcpdf_addfont.php \
                --outpath {{ tmp_project_dir }}/resources/fonts \
                --fonts "{{ item }}"
              args:
                chdir: "{{ tmp_project_dir }}"
              loop: "{{ find_result.files | map(attribute='path') | list }}"
            - name: add TCPDF setting
              ansible.builtin.blockinfile:
                path: "{{ tmp_project_dir }}/config/paths.php"
                marker: "// {mark} ANSIBLE MANAGED BLOCK"
                content: |
                  define ('K_PATH_FONTS', ROOT . 'resources'. DS . 'fonts' . DS);
                  define ('PDF_FONT_NAME_MAIN', 'NotoSansCJKjp');
          when: resource_font_dir_result is changed
      when: tcpdf_result.stat.exists
    - name: synchronize project files(working directory => shard directory)
      ansible.posix.synchronize:
        src: "{{ tmp_project_dir }}/"
        dest: /vagrant/src
      delegate_to: "{{ inventory_hostname }}"
    - name: remove temporary project directory
      ansible.builtin.file:
        path: "{{ tmp_project_dir }}"
        state: absent
    - name: regenerate dummy file
      ansible.builtin.file:
        path: /vagrant/src/.gitkeep
        state: touch
    - name: set variables
      ansible.builtin.set_fact:
        dot_envrc_value: |
          layout php
          layout node
          PATH_add bin
          source_env_if_exists .env
        dot_env_value: |
          export APP_DEFAULT_LOCALE="ja_JP"
          export APP_DEFAULT_TIMEZONE="Asia/Tokyo"
          export DATABASE_URL="mysql://app_dev:app_dev_P455w0rd@localhost/app_dev?encoding=utf8&timezone=UTC&cacheMetadata=true&quoteIdentifiers=false&persistent=false"
          export DATABASE_TEST_URL="mysql://app_test:app_test_P455w0rd@localhost/app_test?encoding=utf8&timezone=UTC&cacheMetadata=true&quoteIdentifiers=false&persistent=false"
    - name: create direnv setting
      ansible.builtin.blockinfile:
        path: /vagrant/src/.envrc
        create: true
        block: "{{ dot_envrc_value }}"
    - name: display direnv setting
      ansible.builtin.debug:
        msg: |
          自動生成したdirenvの設定(.envrc)は以下の通りです
          ```
          {{ dot_envrc_value -}}
          ```
    - name: create CakePHP setting
      ansible.builtin.blockinfile:
        path: /vagrant/src/config/.env
        create: true
        block: "{{ dot_env_value }}"
    - name: display direnv setting
      ansible.builtin.debug:
        msg: |
          自動生成したCakePHPの設定(config/.env)は以下の通りです
          ```
          {{ dot_env_value -}}
          ```
  become: false

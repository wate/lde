<?php
$_xhprof = array();

$ansible_config_json_string = <<<EOT
{{ xhgui_cfg | to_nice_json }}
EOT;
$ansible_xhgui_cfg = json_decode($ansible_config_json_string);
// Change these:
$_xhprof['dbtype'] = $ansible_xhgui_cfg->dbtype; // Only relevant for PDO
$_xhprof['dbhost'] = $ansible_xhgui_cfg->dbhost;
$_xhprof['dbuser'] = $ansible_xhgui_cfg->dbuser;
$_xhprof['dbpass'] = $ansible_xhgui_cfg->dbpass;
$_xhprof['dbname'] = $ansible_xhgui_cfg->dbname;
$_xhprof['dbadapter'] = $ansible_xhgui_cfg->dbadapter;
$_xhprof['servername'] = $ansible_xhgui_cfg->servername;
$_xhprof['namespace'] = $ansible_xhgui_cfg->namespace;
$_xhprof['url'] = $ansible_xhgui_cfg->url;
$_xhprof['getparam'] = $ansible_xhgui_cfg->getparam;

/*
 * MySQL/MySQLi/PDO ONLY
 * Switch to JSON for better performance and support for larger profiler data sets.
 * WARNING: Will break with existing profile data, you will need to TRUNCATE the profile data table.
 */
$_xhprof['serializer'] = $ansible_xhgui_cfg->serializer;

//Uncomment one of these, platform dependent. You may need to tune for your specific environment, but they're worth a try

$_xhprof['dot_binary']  = $ansible_xhgui_cfg->dot_binary;
$_xhprof['dot_tempdir'] = $ansible_xhgui_cfg->dot_tempdir;
$_xhprof['dot_errfile'] = $ansible_xhgui_cfg->dot_errfile;

$_xhprof['display'] = $ansible_xhgui_cfg->display;
$_xhprof['doprofile'] = $ansible_xhgui_cfg->doprofile;

$ignoreURLs = $ansible_xhgui_cfg->ignoreURLs;

$ignoreDomains = $ansible_xhgui_cfg->ignoreDomains;

$exceptionURLs = $ansible_xhgui_cfg->exceptionURLs;

$exceptionPostURLs = $ansible_xhgui_cfg->exceptionPostURLs;

//Control IPs allow you to specify which IPs will be permitted to control when profiling is on or off within your application, and view the results via the UI.
// $controlIPs = false; //Disables access controlls completely.
$controlIPs = $ansible_xhgui_cfg->controlIPs;

//$otherURLS = array();

// ignore builtin functions and call_user_func* during profiling
//$ignoredFunctions = array('call_user_func', 'call_user_func_array', 'socket_select');
if (isset($ansible_xhgui_cfg->ignoredFunctions)) {
    $ignoredFunctions = $ansible_xhgui_cfg->ignoredFunctions;
}
//Default weight - can be overidden by an Apache environment variable 'xhprof_weight' for domain-specific values
$weight = 100;

if ($domain_weight = getenv('xhprof_weight')) {
    $weight = $domain_weight;
}

unset($domain_weight);

/**
* The goal of this function is to accept the URL for a resource, and return a "simplified" version
* thereof. Similar URLs should become identical. Consider:
* http://example.org/stories.php?id=2323
* http://example.org/stories.php?id=2324
* Under most setups these two URLs, while unique, will have an identical execution path, thus it's
* worthwhile to consider them as identical. The script will store both the original URL and the
* Simplified URL for display and comparison purposes. A good simplified URL would be:
* http://example.org/stories.php?id=
*
* @param string $url The URL to be simplified
* @return string The simplified URL
*/
function _urlSimilartor($url)
{
    //This is an example
    $url = preg_replace("!\d{4}!", "", $url);

    // For domain-specific configuration, you can use Apache setEnv xhprof_urlSimilartor_include [some_php_file]
    if ($similartorinclude = getenv('xhprof_urlSimilartor_include')) {
        require_once($similartorinclude);
    }

    $url = preg_replace("![?&]_profile=\d!", "", $url);
    return $url;
}

function _aggregateCalls($calls, $rules = null)
{
    $rules = array(
      'Loading' => 'load::',
      'mysql' => 'mysql_'
      );

    // For domain-specific configuration, you can use Apache setEnv xhprof_aggregateCalls_include [some_php_file]
    if (isset($run_details['aggregateCalls_include']) && strlen($run_details['aggregateCalls_include']) > 1) {
        require_once($run_details['aggregateCalls_include']);
    }

    $addIns = array();
    foreach ($calls as $index => $call) {
        foreach ($rules as $rule => $search) {
            if (strpos($call['fn'], $search) !== false) {
                if (isset($addIns[$search])) {
                    unset($call['fn']);
                    foreach ($call as $k => $v) {
                        $addIns[$search][$k] += $v;
                    }
                } else {
                    $call['fn'] = $rule;
                    $addIns[$search] = $call;
                }
                unset($calls[$index]);  //Remove it from the listing
              break;  //We don't need to run any more rules on this
            } else {
                //echo "nomatch for $search in {$call['fn']}<br />\n";
            }
        }
    }
    return array_merge($addIns, $calls);
}

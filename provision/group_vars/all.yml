
# --------------
# PHPのバージョン
#
# 指定可能な値は以下の通り
# - 7.0
# - 7.1
# - 7.2
# - 7.3
# - 7.4
# - 8.0
# - 8.1
# --------------
# php_version: "8.1"

# --------------
# インストールするPHPのパッケージ
# --------------
php_packages:
  - php{{ php_version }}-cli
  - php{{ php_version }}-common
  - php{{ php_version }}-dev
  - php{{ php_version }}-curl
  - php{{ php_version }}-gd
  - php{{ php_version }}-bcmath
  - php{{ php_version }}-imagick
  - php{{ php_version }}-mbstring
  - php{{ php_version }}-gettext
  - php{{ php_version }}-sqlite3
  - php{{ php_version }}-mysqlnd
  - php{{ php_version }}-pdo
  - php{{ php_version }}-opcache
  - php{{ php_version }}-intl
  - php{{ php_version }}-xml
  - php{{ php_version }}-zip
  - php{{ php_version }}-apcu
  - php{{ php_version }}-redis
  - php{{ php_version }}-fpm

# --------------
# php.iniの初期値を上書きする項目
# その他の設定値は、「provision/roles/php/defaults/main.yml」の「php_cfg」の項目を参照
# --------------
php_cfg: |
  display_errors = On
  memory_limit = 512M
  date.timezone = Asia/Tokyo
  sendmail_path =/usr/local/bin/mhsendmail

# --------------
# MariaDBのrootパスワード
# --------------
mariadb_root_password: r00t_P455w0rd

# --------------
# データベース
# --------------
mariadb_databases:
  # 開発用データベース
  - name: app_dev
    password: app_dev_P455w0rd
    hosts:
      - "127.0.0.1"
      - localhost
      - "192.168.%"
      - "10.%"
  # テスト用データベース
  - name: app_test
    # import_data: /vagrant/source/test_data.sql
    password: app_test_P455w0rd
    hosts:
      - "127.0.0.1"
      - localhost
      - "192.168.%"
      - "10.%"
  # ステージング用データベース
  - name: app_staging
    password: app_staging_P455w0rd
    hosts:
      - "127.0.0.1"
      - localhost
      - "192.168.%"
      - "10.%"
  # 本番用データベース
  - name: app_prod
    password: app_prod_P455w0rd
    hosts:
      - "127.0.0.1"
      - localhost
      - "192.168.%"
      - "10.%"

apache_extra_cfg: |
  EnableSendfile Off

nginx_extra_cfg: |
  sendfile off;

# --------------
# let's EncryptのDNS認証の設定
# --------------
lexicon_provider: "{{ lookup('env', 'LEXICON_PROVIDER') }}"
lexicon_provider_username: "{{ lookup('env', lexicon_provider.upper() + '_USERNAME') }}"
lexicon_provider_password: "{{ lookup('env', lexicon_provider.upper() + '_PASSWORD') }}"
lexicon_provider_token: "{{ lookup('env', lexicon_provider.upper() + '_TOKEN') }}"
lexicon_provider_secret: "{{ lookup('env', lexicon_provider.upper() + '_SECRET') }}"
lexicon_provider_update_delay: 30

letsencrypt_enable_dns_auth: "{{ (lexicon_provider is defined and lexicon_provider | length > 0) }}"
letsencrypt_use_staging: false

# --------------
# Apacheのバーチャルホストの設定
# --------------
## Les't Encryptの設定
apache_vhost_lets_encrypt_ssl_setting:
  certificate_file: /var/lib/dehydrated/certs/{{ domain }}/fullchain.pem
  certificate_key_file: /var/lib/dehydrated/certs/{{ domain }}/privkey.pem
  certificate_chain_file: /var/lib/dehydrated/certs/{{ domain }}/chain.pem

apache_vhosts:
  # ローカルのPCと共有している領域 ( http://www.<ドメイン>/ )
  - name: 000-default
    default: true
    # サーバー名
    server_name: "{{ domain }}"
    # ドキュメントルート
    document_root: /var/www/html{{ doc_root_suffix | default('', true) }}
    # サーバー名の別名
    server_alias: "www.{{ domain }}"
    # AllowOverrideの設定値
    allow_override: All
    options:
      - "-Indexes"
      - "+SymLinksIfOwnerMatch"
    directory_index:
      - index.php
      - index.html
    custom_log:
      path: /var/log/apache2/access.log
      format: combined
    error_log:
      path: /var/log/apache2/error.log
      log_level: warn
    ssl: "{{ letsencrypt_enable_dns_auth | ternary(apache_vhost_lets_encrypt_ssl_setting, {}) }}"
  # MailHog用のバーチャルホスト ( http://mailhog.<ドメイン>/ )
  # https://github.com/mailhog/MailHog
  - name: 001-MailHog
    server_name: mailhog.{{ domain }}
    custom_log:
      path: /var/log/apache2/mailhog_access.log
      format: combine
    error_log:
      path: /var/log/apache2/mailhog_error.log
      log_level: warn
    # リバースプロキシの設定
    proxy_pass:
      - from: /
        to: "http://localhost:8025/"
    proxy_pass_reverse:
      - from: /
        to: "http://localhost:8025/"
    ssl: "{{ letsencrypt_enable_dns_auth | ternary(apache_vhost_lets_encrypt_ssl_setting, {}) }}"
  - name: 002-phpMyAdmin
    server_name: db.{{ domain }}
    document_root: "{{ phpmyadmin_dest }}"
    allow_override: All
    directory_index:
      - index.php
    custom_log:
      path: /var/log/apache2/phpmyadmin_access.log
      format: combine
    error_log:
      path: /var/log/apache2/phpmyadmin_error.log
      log_level: warn
    ssl: "{{ letsencrypt_enable_dns_auth | ternary(apache_vhost_lets_encrypt_ssl_setting, {}) }}"
    extra_setting: |
      <Directory {{ phpmyadmin_dest }}/templates>
          Require all denied
      </Directory>
      <Directory {{ phpmyadmin_dest }}/libraries>
          Require all denied
      </Directory>
      <Directory {{ phpmyadmin_dest }}/setup>
          Require all denied
      </Directory>
      <Directory {{ phpmyadmin_upload_dir }}>
          Require all denied
      </Directory>
      <Directory {{ phpmyadmin_save_dir }}>
          Require all denied
      </Directory>
      <Directory {{ phpmyadmin_tmp_dir }}>
          Require all denied
      </Directory>
  - name: 003-phpRedisAdmin
    server_name: cache.{{ domain }}
    document_root: "{{ phpredisadmin_dest }}"
    allow_override: All
    directory_index:
      - index.php
    custom_log:
      path: /var/log/apache2/phpredisadmin_access.log
      format: combine
    error_log:
      path: /var/log/apache2/phpredisadmin_error.log
      log_level: warn
    ssl: "{{ letsencrypt_enable_dns_auth | ternary(apache_vhost_lets_encrypt_ssl_setting, {}) }}"
  - name: 004-XHProf
    server_name: xhprof.{{ domain }}
    document_root: "{{ php_xhprof_dest }}/xhprof_html"
    allow_override: All
    directory_index:
      - index.php
    custom_log:
      path: /var/log/apache2/xhprof_access.log
      format: combine
    error_log:
      path: /var/log/apache2/xhprof_error.log
      log_level: warn
    ssl: "{{ letsencrypt_enable_dns_auth | ternary(apache_vhost_lets_encrypt_ssl_setting, {}) }}"

# --------------
# Nginxのバーチャルホストの設定
# --------------

## Les't Encryptの設定
nginx_vhost_lets_encrypt_ssl_setting:
  certificate: /var/lib/dehydrated/certs/{{ domain }}/fullchain.pem
  certificate_key: /var/lib/dehydrated/certs/{{ domain }}/privkey.pem
  trusted_certificate: /var/lib/dehydrated/certs/{{ domain }}/cert.pem

nginx_vhosts:
  - name: default
    default: true
    server_name:
      - "{{ domain }}"
      - "www.{{ domain }}"
    access_log: /var/log/nginx/access.log
    error_log: /var/log/nginx/error.log
    document_root: /var/www/html{{ doc_root_suffix | default('', true) }}
    index:
      - index.php
      - index.html
    client_max_body_size: 20M
    include:
      - snippets/letsencrypt_dehydrated.conf
    locations:
      - pattern: "/"
        content:
          try_files $uri $uri/ /index.php?$args;
      - pattern: "\\.php$"
        match_type: "~"
        content: |
          include snippets/fastcgi-php.conf;
          fastcgi_pass unix:/run/php/php-fpm.sock;
      - pattern: "/\\.ht"
        match_type: "~"
        content: |
          deny all;
    ssl: "{{ letsencrypt_enable_dns_auth | ternary(nginx_vhost_lets_encrypt_ssl_setting, {}) }}"
  # MailHog用のバーチャルホスト ( http://mailhog.<ドメイン>/ )
  - name: mailhog
    server_name: mailhog.{{ domain }}
    access_log: /var/log/nginx/mailhog_access.log
    error_log: /var/log/nginx/mailhog_error.log
    locations:
      - pattern: /
        content: |
          proxy_pass http://localhost:8025/;
          include proxy_params;
    ssl: "{{ letsencrypt_enable_dns_auth | ternary(nginx_vhost_lets_encrypt_ssl_setting, {}) }}"
  # phpMyAdmin用のバーチャルホスト ( http://db.<ドメイン>/ )
  - name: phpMyAdmin
    server_name: db.{{ domain }}
    document_root: "{{ phpmyadmin_dest }}"
    index:
      - index.php
      - index.html
    client_max_body_size: 20M
    access_log: /var/log/nginx/phpmyadmin_access.log
    error_log: /var/log/nginx/phpmyadmin_error.log
    locations:
      - pattern: "/"
        content:
          try_files $uri $uri/ =404;
      - pattern: "\\.php$"
        match_type: "~"
        content: |
          include snippets/fastcgi-php.conf;
          fastcgi_pass unix:/run/php/php-fpm.sock;
      - pattern: "/\\.ht"
        match_type: "~"
        content: |
          deny all;
      - pattern: "/templates"
        match_type: "^~"
        content: |
          deny all;
      - pattern: "/libraries"
        match_type: "^~"
        content: |
          deny all;
      - pattern: "/setup"
        match_type: "^~"
        content: |
          deny all;
      - pattern: "/{{ phpmyadmin_upload_dir | replace(phpmyadmin_dest, '') }}"
        match_type: "^~"
        content: |
          deny all;
      - pattern: "/{{ phpmyadmin_save_dir | replace(phpmyadmin_dest, '') }}"
        match_type: "^~"
        content: |
          deny all;
      - pattern: "/{{ phpmyadmin_tmp_dir | replace(phpmyadmin_dest, '') }}"
        match_type: "^~"
        content: |
          deny all;
    ssl: "{{ letsencrypt_enable_dns_auth | ternary(nginx_vhost_lets_encrypt_ssl_setting, {}) }}"
  # phpRedisAdmin用のバーチャルホスト ( http://cache.<ドメイン>/ )
  - name: phpRedisAdmin
    server_name: cache.{{ domain }}
    document_root: "{{ phpredisadmin_dest }}"
    index:
      - index.php
      - index.html
    client_max_body_size: 20M
    access_log: /var/log/nginx/phpredisadmin_access.log
    error_log: /var/log/nginx/phpredisadmin_error.log
    locations:
      - pattern: "/"
        content:
          try_files $uri $uri/ =404;
      - pattern: "\\.php$"
        match_type: "~"
        content: |
          include snippets/fastcgi-php.conf;
          fastcgi_pass unix:/run/php/php-fpm.sock;
      - pattern: "/\\.ht"
        match_type: "~"
        content: |
          deny all;
    ssl: "{{ letsencrypt_enable_dns_auth | ternary(nginx_vhost_lets_encrypt_ssl_setting, {}) }}"
  # XHProf用のバーチャルホスト ( http://xhprof.<ドメイン>/ )
  - name: XHProf
    server_name: xhprof.{{ domain }}
    document_root: "{{ php_xhprof_dest }}/xhprof_html"
    index:
      - index.php
      - index.html
    client_max_body_size: 20M
    access_log: /var/log/nginx/xhprof_access.log
    error_log: /var/log/nginx/xhprof_error.log
    locations:
      - pattern: "/"
        content:
          try_files $uri $uri/ =404;
      - pattern: "\\.php$"
        match_type: "~"
        content: |
          include snippets/fastcgi-php.conf;
          fastcgi_pass unix:/run/php/php-fpm.sock;
      - pattern: "/\\.ht"
        match_type: "~"
        content: |
          deny all;
  - name: status
    server_name: localhost
    listen: 8080
    locations:
      - pattern: "/nginx_status"
        content: |
          stub_status on;

# --------------
# MariaDBの設定
# --------------
mariadb_mysqld_cfg:
  sql_mode:
    - STRICT_TRANS_TABLES
    - NO_ZERO_IN_DATE
    - NO_ZERO_DATE
    - ERROR_FOR_DIVISION_BY_ZERO
    - NO_AUTO_CREATE_USER
    - NO_ENGINE_SUBSTITUTION
  slow_query_log: true
  long_query_time: 1
  bind_address: 0.0.0.0
  # log_warnings: 0
  # min_examined_row_limit: 0
  # log_queries_not_using_indexes: false
  # log_slow_admin_statements: false
  slow_query_log_file: /var/log/mariadb/slow_query.log
  general_log: false
  general_log_file: /var/log/mariadb/general.log

mariadb_allow_connect_other_host: true

# --------------------------
# dehydrated
# --------------------------
lets_encrypt_domains:
  - name: "{{ domain }}"
    domains:
      - "{{ domain }}"
      - "*.{{ domain }}"

dehydrated_cfg:
  CA: https://acme{{ letsencrypt_use_staging | ternary('-staging', '') }}-v02.api.letsencrypt.org/directory
  CHALLENGETYPE: "{{ letsencrypt_enable_dns_auth | ternary('dns-01', 'http-01') }}"

dehydrated_auto_execute: "{{ letsencrypt_enable_dns_auth }}"

dehydrated_domains: "{{ letsencrypt_enable_dns_auth | ternary(lets_encrypt_domains, [])  }}"

dehydrated_hook_initialize: |
  {% if letsencrypt_enable_dns_auth -%}
  set -e
  set -u
  set -o pipefail
  {% if lexicon_provider_username is defined and lexicon_provider_username | length > 0 -%}
  export LEXICON_{{ lexicon_provider.upper()  }}_USERNAME="{{ lexicon_provider_username }}"
  {% endif %}
  {% if lexicon_provider_password is defined and lexicon_provider_password | length > 0 -%}
  export LEXICON_{{ lexicon_provider.upper()  }}_PASSWORD="{{ lexicon_provider_password }}"
  {% endif %}
  {% if lexicon_provider_token is defined and lexicon_provider_token | length > 0 -%}
  export LEXICON_{{ lexicon_provider.upper()  }}_TOKEN="{{ lexicon_provider_token }}"
  {% endif %}
  {% if lexicon_provider_secret is defined and lexicon_provider_secret | length > 0 -%}
  export LEXICON_{{ lexicon_provider.upper()  }}_SECRET="{{ lexicon_provider_secret }}"
  {% endif %}
  export PROVIDER_UPDATE_DELAY={{ lexicon_provider_update_delay | default('30') }}
  {% endif %}

## --------
## @see https://github.com/AnalogJ/lexicon/blob/master/examples/dehydrated.default.sh#L11
## --------
dehydrated_hook_deploy_challenge: |
  {% if lexicon_provider is defined and lexicon_provider | length > 0 -%}
    local chain=($@)
    for ((i=0; i < $#; i+=3)); do
        local DOMAIN="${chain[i]}" TOKEN_FILENAME="${chain[i+1]}" TOKEN_VALUE="${chain[i+2]}"
        echo "deploy_challenge called: ${DOMAIN}, ${TOKEN_FILENAME}, ${TOKEN_VALUE}"
        lexicon {{ lexicon_provider }} create ${DOMAIN} TXT --name="_acme-challenge.${DOMAIN}." --content="${TOKEN_VALUE}"
    done
    local DELAY_COUNTDOWN=$PROVIDER_UPDATE_DELAY
    while [ $DELAY_COUNTDOWN -gt 0 ]; do
        echo -ne "${DELAY_COUNTDOWN}\033[0K\r"
        sleep 1
        : $((DELAY_COUNTDOWN--))
    done
  {% endif %}

## --------
## @see https://github.com/AnalogJ/lexicon/blob/master/examples/dehydrated.default.sh#L11
## --------
dehydrated_hook_clean_challenge: |
  {% if lexicon_provider is defined and lexicon_provider | length > 0 -%}
    local chain=($@)
    for ((i=0; i < $#; i+=3)); do
        local DOMAIN="${chain[i]}" TOKEN_FILENAME="${chain[i+1]}" TOKEN_VALUE="${chain[i+2]}"
        echo "clean_challenge called: ${DOMAIN}, ${TOKEN_FILENAME}, ${TOKEN_VALUE}"
        lexicon {{ lexicon_provider }} delete ${DOMAIN} TXT --name="_acme-challenge.${DOMAIN}." --content="${TOKEN_VALUE}"
    done
  {% endif %}

dehydrated_hook_deploy_cert: |
  if [ -e /usr/sbin/{{ 'apache2' if (web_server | default('apache')) == 'apache' else 'nginx' }} ]; then
      systemctl restart {{ 'apache2' if (web_server | default('apache')) == 'apache' else 'nginx' }}
  fi

# --------------------------
# Mackerel
# --------------------------
## データベース設定
mackerel_db_user: "{{ lookup('env', 'MACKEREL_DB_USER') | default('mackerel', true) }}"
mackerel_db_password: "{{ lookup('env', 'MACKEREL_DB_PASSWORD') | default('mackerel_password', true) }}"

mariadb_users:
  - name: "{{ mackerel_db_user }}"
    password: "{{ mackerel_db_password }}"
    hosts:
      - "127.0.0.1"
      - "::1"
      - localhost
    privs:
      - "*.*:SUPER"

mackerel_agent_api_key: "{{ lookup('env', 'MACKEREL_API_KEY') }}"
mackerel_agent_host_id: "{{ lookup('env', 'MACKEREL_HOST_ID') }}"
mackerel_agent_extra_setting: |
  roles = [ "test:web", "test:db" ]
  [plugin.metrics.linux]
  command = "/usr/bin/mackerel-plugin-linux"
  [plugin.metrics.mysql]
  command = "/usr/bin/mackerel-plugin-mysql -username={{ mackerel_db_user }} -password={{ mackerel_db_password }}"
  [plugin.metrics.mailq]
  command = "/usr/bin/mackerel-plugin-mailq -M postfix"
  {% if (web_server | default('apache')) == 'apache' -%}
  [plugin.metrics.apache]
  command = "/usr/bin/mackerel-plugin-apache"
  {% else %}
  [plugin.metrics.nginx]
  command = "/usr/bin/mackerel-plugin-nginx"
  {% endif %}

mackerel_agent_active_and_enabled_on_system_startup: "{{ mackerel_agent_api_key | length > 0 | ternary(true, false) }}"

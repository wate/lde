[PHP]

;;;;;;;;;;;;;;;;;;;
; About php.ini   ;
;;;;;;;;;;;;;;;;;;;
; PHP's initialization file, generally called php.ini, is responsible for
; configuring many of the aspects of PHP's behavior.

; PHP attempts to find and load this configuration from a number of locations.
; The following is a summary of its search order:
; 1. SAPI module specific location.
; 2. The PHPRC environment variable. (As of PHP 5.2.0)
; 3. A number of predefined registry keys on Windows (As of PHP 5.2.0)
; 4. Current working directory (except CLI)
; 5. The web server's directory (for SAPI modules), or directory of PHP
; (otherwise in Windows)
; 6. The directory from the --with-config-file-path compile time option, or the
; Windows directory (C:\windows or C:\winnt)
; See the PHP docs for more specific information.
; http://php.net/configuration.file

; The syntax of the file is extremely simple.  Whitespace and lines
; beginning with a semicolon are silently ignored (as you probably guessed).
; Section headers (e.g. [Foo]) are also silently ignored, even though
; they might mean something in the future.

; Directives following the section heading [PATH=/www/mysite] only
; apply to PHP files in the /www/mysite directory.  Directives
; following the section heading [HOST=www.example.com] only apply to
; PHP files served from www.example.com.  Directives set in these
; special sections cannot be overridden by user-defined INI files or
; at runtime. Currently, [PATH=] and [HOST=] sections only work under
; CGI/FastCGI.
; http://php.net/ini.sections

; Directives are specified using the following syntax:
; directive = value
; Directive names are *case sensitive* - foo=bar is different from FOO=bar.
; Directives are variables used to configure PHP or PHP extensions.
; There is no name validation.  If PHP can't find an expected
; directive because it is not set or is mistyped, a default value will be used.

; The value can be a string, a number, a PHP constant (e.g. E_ALL or M_PI), one
; of the INI constants (On, Off, True, False, Yes, No and None) or an expression
; (e.g. E_ALL & ~E_NOTICE), a quoted string ("bar"), or a reference to a
; previously set variable or directive (e.g. ${foo})

; Expressions in the INI file are limited to bitwise operators and parentheses:
; |  bitwise OR
; ^  bitwise XOR
; &  bitwise AND
; ~  bitwise NOT
; !  boolean NOT

; Boolean flags can be turned on using the values 1, On, True or Yes.
; They can be turned off using the values 0, Off, False or No.

; An empty string can be denoted by simply not writing anything after the equal
; sign, or by using the None keyword:

;  foo =         ; sets foo to an empty string
;  foo = None    ; sets foo to an empty string
;  foo = "None"  ; sets foo to the string 'None'

; If you use constants in your value, and these constants belong to a
; dynamically loaded extension (either a PHP extension or a Zend extension),
; you may only use these constants *after* the line that loads the extension.

;;;;;;;;;;;;;;;;;;;
; About this file ;
;;;;;;;;;;;;;;;;;;;
; PHP comes packaged with two INI files. One that is recommended to be used
; in production environments and one that is recommended to be used in
; development environments.

; php.ini-production contains settings which hold security, performance and
; best practices at its core. But please be aware, these settings may break
; compatibility with older or less security conscience applications. We
; recommending using the production ini in production and testing environments.

; php.ini-development is very similar to its production variant, except it is
; much more verbose when it comes to errors. We recommend using the
; development version only in development environments, as errors shown to
; application users can inadvertently leak otherwise secure information.

; This is php.ini-production INI file.

;;;;;;;;;;;;;;;;;;;
; Quick Reference ;
;;;;;;;;;;;;;;;;;;;
; The following are all the settings which are different in either the production
; or development versions of the INIs with respect to PHP's default behavior.
; Please see the actual settings later in the document for more details as to why
; we recommend these changes in PHP's behavior.

; display_errors
;   Default Value: On
;   Development Value: On
;   Production Value: Off

; display_startup_errors
;   Default Value: Off
;   Development Value: On
;   Production Value: Off

; error_reporting
;   Default Value: E_ALL & ~E_NOTICE & ~E_STRICT & ~E_DEPRECATED
;   Development Value: E_ALL
;   Production Value: E_ALL & ~E_DEPRECATED & ~E_STRICT

; html_errors
;   Default Value: On
;   Development Value: On
;   Production value: On

; log_errors
;   Default Value: Off
;   Development Value: On
;   Production Value: On

; max_input_time
;   Default Value: -1 (Unlimited)
;   Development Value: 60 (60 seconds)
;   Production Value: 60 (60 seconds)

; output_buffering
;   Default Value: Off
;   Development Value: 4096
;   Production Value: 4096

; register_argc_argv
;   Default Value: On
;   Development Value: Off
;   Production Value: Off

; request_order
;   Default Value: None
;   Development Value: "GP"
;   Production Value: "GP"

; session.gc_divisor
;   Default Value: 100
;   Development Value: 1000
;   Production Value: 1000

{% if php_version is version('7.1', '>=') -%}
; session.sid_bits_per_character
{% else -%}
; session.hash_bits_per_character
{% endif %}
;   Default Value: 4
;   Development Value: 5
;   Production Value: 5

; short_open_tag
;   Default Value: On
;   Development Value: Off
;   Production Value: Off

; track_errors
;   Default Value: Off
;   Development Value: On
;   Production Value: Off

; variables_order
;   Default Value: "EGPCS"
;   Development Value: "GPCS"
;   Production Value: "GPCS"

;;;;;;;;;;;;;;;;;;;;
; php.ini Options  ;
;;;;;;;;;;;;;;;;;;;;
; Name for user-defined php.ini (.htaccess) files. Default is ".user.ini"
;user_ini.filename = ".user.ini"
{% if php_cfg.user_ini is defined and php_cfg.user_ini.filename is defined -%}
user_ini.filename = {{ php_cfg.user_ini.filename }}
{% endif %}

; TTL for user-defined php.ini files (time-to-live) in seconds. Default is 300 seconds (5 minutes)
;user_ini.cache_ttl = 300
{% if php_cfg.user_ini is defined and php_cfg.user_ini.cache_ttl is defined -%}
user_ini.cache_ttl = {{ php_cfg.user_ini.cache_ttl }}
{% endif %}

;;;;;;;;;;;;;;;;;;;;
; Language Options ;
;;;;;;;;;;;;;;;;;;;;

; Enable the PHP scripting language engine under Apache.
; http://php.net/engine
engine = {{ 'On' if php_cfg.engine else 'Off' }}

; This directive determines whether or not PHP will recognize code between
; <? and ?> tags as PHP source which should be processed as such. It is
; generally recommended that <?php and ?> should be used and that this feature
; should be disabled, as enabling it may result in issues when generating XML
; documents, however this remains supported for backward compatibility reasons.
; Note that this directive does not control the <?= shorthand tag, which can be
; used regardless of this directive.
; Default Value: On
; Development Value: Off
; Production Value: Off
; http://php.net/short-open-tag
short_open_tag = {{ 'On' if php_cfg.short_open_tag else 'Off' }}

{% if php_version is version('7.0', '<') and php_cfg.asp_tags is defined -%}
; Allow ASP-style <% %> tags.
; http://php.net/asp-tags
asp_tags = {{ 'On' if php_cfg.asp_tags else 'Off' }}
{% endif %}

; The number of significant digits displayed in floating point numbers.
; http://php.net/precision
precision = {{ php_cfg.precision }}

; Output buffering is a mechanism for controlling how much output data
; (excluding headers and cookies) PHP should keep internally before pushing that
; data to the client. If your application's output exceeds this setting, PHP
; will send that data in chunks of roughly the size you specify.
; Turning on this setting and managing its maximum buffer size can yield some
; interesting side-effects depending on your application and web server.
; You may be able to send headers and cookies after you've already sent output
; through print or echo. You also may see performance benefits if your server is
; emitting less packets due to buffered output versus PHP streaming the output
; as it gets it. On production servers, 4096 bytes is a good setting for performance
; reasons.
; Note: Output buffering can also be controlled via Output Buffering Control
;   functions.
; Possible Values:
;   On = Enabled and buffer is unlimited. (Use with caution)
;   Off = Disabled
;   Integer = Enables the buffer and sets its maximum size in bytes.
; Note: This directive is hardcoded to Off for the CLI SAPI
; Default Value: Off
; Development Value: 4096
; Production Value: 4096
; http://php.net/output-buffering
output_buffering = {{ php_cfg.output_buffering }}

; You can redirect all of the output of your scripts to a function.  For
; example, if you set output_handler to "mb_output_handler", character
; encoding will be transparently converted to the specified encoding.
; Setting any output handler automatically turns on output buffering.
; Note: People who wrote portable scripts should not depend on this ini
;   directive. Instead, explicitly set the output handler using ob_start().
;   Using this ini directive may cause problems unless you know what script
;   is doing.
; Note: You cannot use both "mb_output_handler" with "ob_iconv_handler"
;   and you cannot use both "ob_gzhandler" and "zlib.output_compression".
; Note: output_handler must be empty if this is set 'On' !!!!
;   Instead you must use zlib.output_handler.
; http://php.net/output-handler
;output_handler =
{% if php_cfg.output_handler is defined -%}
output_handler = {{ php_cfg.output_handler }}
{% endif %}

; URL rewriter function rewrites URL on the fly by using
; output buffer. You can set target tags by this configuration.
; "form" tag is special tag. It will add hidden input tag to pass values.
; Refer to session.trans_sid_tags for usage.
; Default Value: "form="
; Development Value: "form="
; Production Value: "form="
;url_rewriter.tags="form="
{% if php_cfg.url_rewriter is defined and php_cfg.url_rewriter.tags is defined -%}
url_rewriter.tags = "{{ php_cfg.url_rewriter.tags }}"
{% endif %}

; URL rewriter will not rewrites absolute URL nor form by default. To enable
; absolute URL rewrite, allowed hosts must be defined at RUNTIME.
; Refer to session.trans_sid_hosts for more details.
; Default Value: ""
; Development Value: ""
; Production Value: ""
;url_rewriter.hosts=""
{% if php_cfg.url_rewriter is defined and php_cfg.url_rewriter.hosts is defined -%}
url_rewriter.hosts = "{{ php_cfg.url_rewriter.hosts }}"
{% endif %}

; Transparent output compression using the zlib library
; Valid values for this option are 'off', 'on', or a specific buffer size
; to be used for compression (default is 4KB)
; Note: Resulting chunk size may vary due to nature of compression. PHP
;   outputs chunks that are few hundreds bytes each as a result of
;   compression. If you prefer a larger chunk size for better
;   performance, enable output_buffering in addition.
; Note: You need to use zlib.output_handler instead of the standard
;   output_handler, or otherwise the output will be corrupted.
; http://php.net/zlib.output-compression
zlib.output_compression = {{ 'On' if php_cfg.zlib.output_compression else 'Off' }}

; http://php.net/zlib.output-compression-level
;zlib.output_compression_level = -1
{% if php_cfg.zlib.output_compression_level is defined -%}
zlib.output_compression_level = {{ php_cfg.zlib.output_compression_level }}
{% endif %}

; You cannot specify additional output handlers if zlib.output_compression
; is activated here. This setting does the same as output_handler but in
; a different order.
; http://php.net/zlib.output-handler
;zlib.output_handler =
{% if php_cfg.zlib.output_handler is defined -%}
zlib.output_handler = {{ php_cfg.zlib.output_handler }}
{% endif %}

; Implicit flush tells PHP to tell the output layer to flush itself
; automatically after every output block.  This is equivalent to calling the
; PHP function flush() after each and every call to print() or echo() and each
; and every HTML block.  Turning this option on has serious performance
; implications and is generally recommended for debugging purposes only.
; http://php.net/implicit-flush
; Note: This directive is hardcoded to On for the CLI SAPI
implicit_flush = {{ 'On' if php_cfg.implicit_flush else 'Off' }}

; The unserialize callback function will be called (with the undefined class'
; name as parameter), if the unserializer finds an undefined class
; which should be instantiated. A warning appears if the specified function is
; not defined, or if the function doesn't include/implement the missing class.
; So only set this entry, if you really want to implement such a
; callback-function.
unserialize_callback_func = {{ php_cfg.unserialize_callback_func }}

; When floats & doubles are serialized store serialize_precision significant
; digits after the floating point. The default value ensures that when floats
; are decoded with unserialize, the data will remain the same.
; The value is also used for json_encode when encoding double values.
; If -1 is used, then dtoa mode 0 is used which automatically select the best
; precision.
serialize_precision = {{ php_cfg.serialize_precision }}

; open_basedir, if set, limits all file operations to the defined directory
; and below.  This directive makes most sense if used in a per-directory
; or per-virtualhost web server configuration file.
; http://php.net/open-basedir
;open_basedir =
{% if php_cfg.open_basedir is defined -%}
open_basedir = {{ php_cfg.open_basedir }}
{% endif %}

; This directive allows you to disable certain functions for security reasons.
; It receives a comma-delimited list of function names.
; http://php.net/disable-functions
disable_functions = {{ php_cfg.disable_functions|join(',') }}

; This directive allows you to disable certain classes for security reasons.
; It receives a comma-delimited list of class names.
; http://php.net/disable-classes
disable_classes = {{ php_cfg.disable_classes }}

; Colors for Syntax Highlighting mode.  Anything that's acceptable in
; <span style="color: ???????"> would work.
; http://php.net/syntax-highlighting
;highlight.string  = #DD0000
;highlight.comment = #FF9900
;highlight.keyword = #007700
;highlight.default = #0000BB
;highlight.html    = #000000
{% if php_cfg.highlight is defined and php_cfg.highlight.string is defined -%}
highlight.string = {{ php_cfg.highlight.string }}
{% endif %}
{% if php_cfg.highlight is defined and php_cfg.highlight.comment is defined -%}
highlight.comment = {{ php_cfg.highlight.comment }}
{% endif %}
{% if php_cfg.highlight is defined and php_cfg.highlight.keyword is defined -%}
highlight.keyword = {{ php_cfg.highlight.keyword }}
{% endif %}
{% if php_cfg.highlight is defined and php_cfg.highlight.default is defined -%}
highlight.default = {{ php_cfg.highlight.default }}
{% endif %}
{% if php_cfg.highlight is defined and php_cfg.highlight.html is defined -%}
highlight.html = {{ php_cfg.highlight.html }}
{% endif %}

; If enabled, the request will be allowed to complete even if the user aborts
; the request. Consider enabling it if executing long requests, which may end up
; being interrupted by the user or a browser timing out. PHP's default behavior
; is to disable this feature.
; http://php.net/ignore-user-abort
;ignore_user_abort = On
{% if php_cfg.ignore_user_abort is defined -%}
ignore_user_abort = {{ 'On' if php_cfg.ignore_user_abort else 'Off' }}
{% endif %}

; Determines the size of the realpath cache to be used by PHP. This value should
; be increased on systems where PHP opens many files to reflect the quantity of
; the file operations performed.
; http://php.net/realpath-cache-size
;realpath_cache_size = 16k
{% if php_cfg.realpath_cache_size is defined -%}
realpath_cache_size = {{ php_cfg.realpath_cache_size }}
{% endif %}

; Duration of time, in seconds for which to cache realpath information for a given
; file or directory. For systems with rarely changing files, consider increasing this
; value.
; http://php.net/realpath-cache-ttl
;realpath_cache_ttl = 120
{% if php_cfg.realpath_cache_ttl is defined -%}
realpath_cache_ttl = {{ php_cfg.realpath_cache_ttl }}
{% endif %}

; Enables or disables the circular reference collector.
; http://php.net/zend.enable-gc
zend.enable_gc = {{ 'On' if php_cfg.zend.enable_gc else 'Off' }}

; If enabled, scripts may be written in encodings that are incompatible with
; the scanner.  CP936, Big5, CP949 and Shift_JIS are the examples of such
; encodings.  To use this feature, mbstring extension must be enabled.
; Default: Off
;zend.multibyte = Off
{% if php_cfg.zend.multibyte is defined -%}
zend.multibyte = {{ 'On' if php_cfg.zend.multibyte else 'Off' }}
{% endif %}

; Allows to set the default encoding for the scripts.  This value will be used
; unless "declare(encoding=...)" directive appears at the top of the script.
; Only affects if zend.multibyte is set.
; Default: ""
;zend.script_encoding =
{% if php_cfg.zend.script_encoding is defined -%}
zend.script_encoding = {{ php_cfg.zend.script_encoding }}
{% endif %}

;;;;;;;;;;;;;;;;;
; Miscellaneous ;
;;;;;;;;;;;;;;;;;

; Decides whether PHP may expose the fact that it is installed on the server
; (e.g. by adding its signature to the Web server header).  It is no security
; threat in any way, but it makes it possible to determine whether you use PHP
; on your server or not.
; http://php.net/expose-php
expose_php = {{ 'On' if php_cfg.expose_php else 'Off' }}

;;;;;;;;;;;;;;;;;;;
; Resource Limits ;
;;;;;;;;;;;;;;;;;;;

; Maximum execution time of each script, in seconds
; http://php.net/max-execution-time
; Note: This directive is hardcoded to 0 for the CLI SAPI
max_execution_time = {{ php_cfg.max_execution_time }}

; Maximum amount of time each script may spend parsing request data. It's a good
; idea to limit this time on productions servers in order to eliminate unexpectedly
; long running scripts.
; Note: This directive is hardcoded to -1 for the CLI SAPI
; Default Value: -1 (Unlimited)
; Development Value: 60 (60 seconds)
; Production Value: 60 (60 seconds)
; http://php.net/max-input-time
max_input_time = {{ php_cfg.max_input_time }}

; Maximum input variable nesting level
; http://php.net/max-input-nesting-level
;max_input_nesting_level = 64
{% if php_cfg.max_input_nesting_level is defined -%}
max_input_nesting_level = {{ php_cfg.max_input_nesting_level }}
{% endif %}

; How many GET/POST/COOKIE input variables may be accepted
; max_input_vars = 1000
{% if php_cfg.max_input_vars is defined -%}
max_input_vars = {{ php_cfg.max_input_vars }}
{% endif %}

; Maximum amount of memory a script may consume (128MB)
; http://php.net/memory-limit
memory_limit = {{ php_cfg.memory_limit }}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Error handling and logging ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; This directive informs PHP of which errors, warnings and notices you would like
; it to take action for. The recommended way of setting values for this
; directive is through the use of the error level constants and bitwise
; operators. The error level constants are below here for convenience as well as
; some common settings and their meanings.
; By default, PHP is set to take action on all errors, notices and warnings EXCEPT
; those related to E_NOTICE and E_STRICT, which together cover best practices and
; recommended coding standards in PHP. For performance reasons, this is the
; recommend error reporting setting. Your production server shouldn't be wasting
; resources complaining about best practices and coding standards. That's what
; development servers and development settings are for.
; Note: The php.ini-development file has this setting as E_ALL. This
; means it pretty much reports everything which is exactly what you want during
; development and early testing.
;
; Error Level Constants:
; E_ALL             - All errors and warnings (includes E_STRICT as of PHP 5.4.0)
; E_ERROR           - fatal run-time errors
; E_RECOVERABLE_ERROR  - almost fatal run-time errors
; E_WARNING         - run-time warnings (non-fatal errors)
; E_PARSE           - compile-time parse errors
; E_NOTICE          - run-time notices (these are warnings which often result
;                     from a bug in your code, but it's possible that it was
;                     intentional (e.g., using an uninitialized variable and
;                     relying on the fact it is automatically initialized to an
;                     empty string)
; E_STRICT          - run-time notices, enable to have PHP suggest changes
;                     to your code which will ensure the best interoperability
;                     and forward compatibility of your code
; E_CORE_ERROR      - fatal errors that occur during PHP's initial startup
; E_CORE_WARNING    - warnings (non-fatal errors) that occur during PHP's
;                     initial startup
; E_COMPILE_ERROR   - fatal compile-time errors
; E_COMPILE_WARNING - compile-time warnings (non-fatal errors)
; E_USER_ERROR      - user-generated error message
; E_USER_WARNING    - user-generated warning message
; E_USER_NOTICE     - user-generated notice message
; E_DEPRECATED      - warn about code that will not work in future versions
;                     of PHP
; E_USER_DEPRECATED - user-generated deprecation warnings
;
; Common Values:
;   E_ALL (Show all errors, warnings and notices including coding standards.)
;   E_ALL & ~E_NOTICE  (Show all errors, except for notices)
;   E_ALL & ~E_NOTICE & ~E_STRICT  (Show all errors, except for notices and coding standards warnings.)
;   E_COMPILE_ERROR|E_RECOVERABLE_ERROR|E_ERROR|E_CORE_ERROR  (Show only errors)
; Default Value: E_ALL & ~E_NOTICE & ~E_STRICT & ~E_DEPRECATED
; Development Value: E_ALL
; Production Value: E_ALL & ~E_DEPRECATED & ~E_STRICT
; http://php.net/error-reporting
error_reporting = {{ php_cfg.error_reporting }}

; This directive controls whether or not and where PHP will output errors,
; notices and warnings too. Error output is very useful during development, but
; it could be very dangerous in production environments. Depending on the code
; which is triggering the error, sensitive information could potentially leak
; out of your application such as database usernames and passwords or worse.
; For production environments, we recommend logging errors rather than
; sending them to STDOUT.
; Possible Values:
;   Off = Do not display any errors
;   stderr = Display errors to STDERR (affects only CGI/CLI binaries!)
;   On or stdout = Display errors to STDOUT
; Default Value: On
; Development Value: On
; Production Value: Off
; http://php.net/display-errors
display_errors = {{ 'On' if php_cfg.display_errors else 'Off' }}

; The display of errors which occur during PHP's startup sequence are handled
; separately from display_errors. PHP's default behavior is to suppress those
; errors from clients. Turning the display of startup errors on can be useful in
; debugging configuration problems. We strongly recommend you
; set this to 'off' for production servers.
; Default Value: Off
; Development Value: On
; Production Value: Off
; http://php.net/display-startup-errors
display_startup_errors = {{ 'On' if php_cfg.display_startup_errors else 'Off' }}

; Besides displaying errors, PHP can also log errors to locations such as a
; server-specific log, STDERR, or a location specified by the error_log
; directive found below. While errors should not be displayed on productions
; servers they should still be monitored and logging is a great way to do that.
; Default Value: Off
; Development Value: On
; Production Value: On
; http://php.net/log-errors
log_errors = {{ 'On' if php_cfg.log_errors else 'Off' }}

; Set maximum length of log_errors. In error_log information about the source is
; added. The default is 1024 and 0 allows to not apply any maximum length at all.
; http://php.net/log-errors-max-len
log_errors_max_len = {{ php_cfg.log_errors_max_len }}

; Do not log repeated messages. Repeated errors must occur in same file on same
; line unless ignore_repeated_source is set true.
; http://php.net/ignore-repeated-errors
ignore_repeated_errors = {{ 'On' if php_cfg.ignore_repeated_errors else 'Off' }}

; Ignore source of message when ignoring repeated messages. When this setting
; is On you will not log errors with repeated messages from different files or
; source lines.
; http://php.net/ignore-repeated-source
ignore_repeated_source = {{ 'On' if php_cfg.ignore_repeated_source else 'Off' }}

; If this parameter is set to Off, then memory leaks will not be shown (on
; stdout or in the log). This has only effect in a debug compile, and if
; error reporting includes E_WARNING in the allowed list
; http://php.net/report-memleaks
report_memleaks = {{ 'On' if php_cfg.report_memleaks else 'Off' }}

; This setting is on by default.
;report_zend_debug = 0
{% if php_cfg.report_zend_debug is defined -%}
report_zend_debug = {{ php_cfg.report_zend_debug }}
{% endif %}

; Store the last error/warning message in $php_errormsg (boolean). Setting this value
; to On can assist in debugging and is appropriate for development servers. It should
; however be disabled on production servers.
; Default Value: Off
; Development Value: On
; Production Value: Off
; http://php.net/track-errors
track_errors = {{ 'On' if php_cfg.track_errors else 'Off' }}

; Turn off normal error reporting and emit XML-RPC error XML
; http://php.net/xmlrpc-errors
;xmlrpc_errors = 0
{% if php_cfg.xmlrpc_errors is defined -%}
xmlrpc_errors = {{ php_cfg.xmlrpc_errors }}
{% endif %}

; An XML-RPC faultCode
;xmlrpc_error_number = 0
{% if php_cfg.xmlrpc_errors is defined -%}
xmlrpc_error_number = {{ php_cfg.xmlrpc_error_number }}
{% endif %}

; When PHP displays or logs an error, it has the capability of formatting the
; error message as HTML for easier reading. This directive controls whether
; the error message is formatted as HTML or not.
; Note: This directive is hardcoded to Off for the CLI SAPI
; Default Value: On
; Development Value: On
; Production value: On
; http://php.net/html-errors
html_errors = {{ 'On' if php_cfg.html_errors else 'Off' }}

; If html_errors is set to On *and* docref_root is not empty, then PHP
; produces clickable error messages that direct to a page describing the error
; or function causing the error in detail.
; You can download a copy of the PHP manual from http://php.net/docs
; and change docref_root to the base URL of your local copy including the
; leading '/'. You must also specify the file extension being used including
; the dot. PHP's default behavior is to leave these settings empty, in which
; case no links to documentation are generated.
; Note: Never use this feature for production boxes.
; http://php.net/docref-root
; Examples
;docref_root = "/phpmanual/"
{% if php_cfg.docref_root is defined -%}
docref_root = {{ php_cfg.docref_root }}
{% endif %}

; http://php.net/docref-ext
;docref_ext = .html
{% if php_cfg.docref_ext is defined -%}
docref_ext = {{ php_cfg.docref_ext }}
{% endif %}

; String to output before an error message. PHP's default behavior is to leave
; this setting blank.
; http://php.net/error-prepend-string
; Example:
;error_prepend_string = "<span style='color: #ff0000'>"
{% if php_cfg.error_prepend_string is defined -%}
error_prepend_string = {{ php_cfg.error_prepend_string }}
{% endif %}

; String to output after an error message. PHP's default behavior is to leave
; this setting blank.
; http://php.net/error-append-string
; Example:
;error_append_string = "</span>"
{% if php_cfg.error_append_string is defined -%}
error_append_string = {{ php_cfg.error_append_string }}
{% endif %}

; Log errors to specified file. PHP's default behavior is to leave this value
; empty.
; http://php.net/error-log
; Example:
;error_log = php_errors.log
; Log errors to syslog.
;error_log = syslog
{% if php_cfg.error_log is defined -%}
error_log = {{ php_cfg.error_log }}
{% endif %}

;windows.show_crt_warning
; Default value: 0
; Development value: 0
; Production value: 0

;;;;;;;;;;;;;;;;;
; Data Handling ;
;;;;;;;;;;;;;;;;;

; The separator used in PHP generated URLs to separate arguments.
; PHP's default setting is "&".
; http://php.net/arg-separator.output
; Example:
;arg_separator.output = "&amp;"
{% if php_cfg.arg_separator is defined and php_cfg.arg_separator.output is defined -%}
arg_separator.output = {{ php_cfg.arg_separator.output }}
{% endif %}

; List of separator(s) used by PHP to parse input URLs into variables.
; PHP's default setting is "&".
; NOTE: Every character in this directive is considered as separator!
; http://php.net/arg-separator.input
; Example:
;arg_separator.input = ";&"
{% if php_cfg.arg_separator is defined and php_cfg.arg_separator.input is defined -%}
arg_separator.input = {{ php_cfg.arg_separator.input }}
{% endif %}

; This directive determines which super global arrays are registered when PHP
; starts up. G,P,C,E & S are abbreviations for the following respective super
; globals: GET, POST, COOKIE, ENV and SERVER. There is a performance penalty
; paid for the registration of these arrays and because ENV is not as commonly
; used as the others, ENV is not recommended on productions servers. You
; can still get access to the environment variables through getenv() should you
; need to.
; Default Value: "EGPCS"
; Development Value: "GPCS"
; Production Value: "GPCS";
; http://php.net/variables-order
variables_order = "{{ php_cfg.variables_order }}"

; This directive determines which super global data (G,P & C) should be
; registered into the super global array REQUEST. If so, it also determines
; the order in which that data is registered. The values for this directive
; are specified in the same manner as the variables_order directive,
; EXCEPT one. Leaving this value empty will cause PHP to use the value set
; in the variables_order directive. It does not mean it will leave the super
; globals array REQUEST empty.
; Default Value: None
; Development Value: "GP"
; Production Value: "GP"
; http://php.net/request-order
request_order = "{{ php_cfg.request_order }}"

; This directive determines whether PHP registers $argv & $argc each time it
; runs. $argv contains an array of all the arguments passed to PHP when a script
; is invoked. $argc contains an integer representing the number of arguments
; that were passed when the script was invoked. These arrays are extremely
; useful when running scripts from the command line. When this directive is
; enabled, registering these variables consumes CPU cycles and memory each time
; a script is executed. For performance reasons, this feature should be disabled
; on production servers.
; Note: This directive is hardcoded to On for the CLI SAPI
; Default Value: On
; Development Value: Off
; Production Value: Off
; http://php.net/register-argc-argv
register_argc_argv = {{ 'On' if php_cfg.register_argc_argv else 'Off' }}

; When enabled, the ENV, REQUEST and SERVER variables are created when they're
; first used (Just In Time) instead of when the script starts. If these
; variables are not used within a script, having this directive on will result
; in a performance gain. The PHP directive register_argc_argv must be disabled
; for this directive to have any affect.
; http://php.net/auto-globals-jit
auto_globals_jit = {{ 'On' if php_cfg.auto_globals_jit else 'Off' }}

; Whether PHP will read the POST data.
; This option is enabled by default.
; Most likely, you won't want to disable this option globally. It causes $_POST
; and $_FILES to always be empty; the only way you will be able to read the
; POST data will be through the php://input stream wrapper. This can be useful
; to proxy requests or to process the POST data in a memory efficient fashion.
; http://php.net/enable-post-data-reading
;enable_post_data_reading = Off
{% if php_cfg.enable_post_data_reading is defined -%}
enable_post_data_reading = {{ 'On' if php_cfg.enable_post_data_reading else 'Off' }}
{% endif %}

; Maximum size of POST data that PHP will accept.
; Its value may be 0 to disable the limit. It is ignored if POST data reading
; is disabled through enable_post_data_reading.
; http://php.net/post-max-size
post_max_size = {{ php_cfg.post_max_size }}

; Automatically add files before PHP document.
; http://php.net/auto-prepend-file
auto_prepend_file = {{ php_cfg.auto_prepend_file }}

; Automatically add files after PHP document.
; http://php.net/auto-append-file
auto_append_file = {{ php_cfg.auto_append_file }}

; By default, PHP will output a media type using the Content-Type header. To
; disable this, simply set it to be empty.
;
; PHP's built-in default media type is set to text/html.
; http://php.net/default-mimetype
default_mimetype = "{{ php_cfg.default_mimetype }}"

; PHP's default character set is set to UTF-8.
; http://php.net/default-charset
default_charset = "{{ php_cfg.default_charset }}"

; PHP internal character encoding is set to empty.
; If empty, default_charset is used.
; http://php.net/internal-encoding
;internal_encoding =
{% if php_cfg.internal_encoding is defined -%}
internal_encoding = {{ php_cfg.internal_encoding }}
{% endif %}

; PHP input character encoding is set to empty.
; If empty, default_charset is used.
; http://php.net/input-encoding
;input_encoding =
{% if php_cfg.internal_encoding is defined -%}
input_encoding = {{ php_cfg.input_encoding }}
{% endif %}

; PHP output character encoding is set to empty.
; If empty, default_charset is used.
; See also output_buffer.
; http://php.net/output-encoding
;output_encoding =
{% if php_cfg.output_encoding is defined -%}
output_encoding = {{ php_cfg.output_encoding }}
{% endif %}

{% if php_version is version('7.0', '<')  -%}
; Always populate the $HTTP_RAW_POST_DATA variable. PHP's default behavior is
; to disable this feature and it will be removed in a future version.
; If post reading is disabled through enable_post_data_reading,
; $HTTP_RAW_POST_DATA is *NOT* populated.
; http://php.net/always-populate-raw-post-data
;always_populate_raw_post_data = -1
{% if php_cfg.always_populate_raw_post_data is defined -%}
always_populate_raw_post_data = {{ php_cfg.always_populate_raw_post_data }}
{% endif %}
{% endif %}

;;;;;;;;;;;;;;;;;;;;;;;;;
; Paths and Directories ;
;;;;;;;;;;;;;;;;;;;;;;;;;

; UNIX: "/path1:/path2"
;include_path = ".:/php/includes"
;
; Windows: "\path1;\path2"
;include_path = ".;c:\php\includes"
;
; PHP's default setting for include_path is ".;/path/to/php/pear"
; http://php.net/include-path
{% if php_cfg.include_path is defined -%}
include_path = {{ php_cfg.include_path }}
{% endif %}

; The root of the PHP pages, used only if nonempty.
; if PHP was not compiled with FORCE_REDIRECT, you SHOULD set doc_root
; if you are running php as a CGI under any web server (other than IIS)
; see documentation for security issues.  The alternate is to use the
; cgi.force_redirect configuration below
; http://php.net/doc-root
doc_root = {{ php_cfg.doc_root }}

; The directory under which PHP opens the script using /~username used only
; if nonempty.
; http://php.net/user-dir
user_dir = {{ php_cfg.user_dir }}

; Directory in which the loadable extensions (modules) reside.
; http://php.net/extension-dir
; extension_dir = "./"
; On windows:
; extension_dir = "ext"
{% if php_cfg.extension_dir is defined -%}
extension_dir = {{ php_cfg.extension_dir }}
{% endif %}

; Directory where the temporary files should be placed.
; Defaults to the system default (see sys_get_temp_dir)
; sys_temp_dir = "/tmp"
{% if php_cfg.sys_temp_dir is defined -%}
sys_temp_dir = {{ php_cfg.sys_temp_dir }}
{% endif %}

; Whether or not to enable the dl() function.  The dl() function does NOT work
; properly in multithreaded servers, such as IIS or Zeus, and is automatically
; disabled on them.
; http://php.net/enable-dl
enable_dl = {{ 'On' if php_cfg.enable_dl else 'Off' }}

; cgi.force_redirect is necessary to provide security running PHP as a CGI under
; most web servers.  Left undefined, PHP turns this on by default.  You can
; turn it off here AT YOUR OWN RISK
; **You CAN safely turn this off for IIS, in fact, you MUST.**
; http://php.net/cgi.force-redirect
;cgi.force_redirect = 1
{% if php_cfg.cgi is defined and php_cfg.cgi.force_redirect is defined -%}
cgi.force_redirect = {{ php_cfg.cgi.force_redirect }}
{% endif %}

; if cgi.nph is enabled it will force cgi to always sent Status: 200 with
; every request. PHP's default behavior is to disable this feature.
;cgi.nph = 1
{% if php_cfg.cgi is defined and php_cfg.cgi.nph is defined -%}
cgi.nph = {{ php_cfg.cgi.nph }}
{% endif %}

; if cgi.force_redirect is turned on, and you are not running under Apache or Netscape
; (iPlanet) web servers, you MAY need to set an environment variable name that PHP
; will look for to know it is OK to continue execution.  Setting this variable MAY
; cause security issues, KNOW WHAT YOU ARE DOING FIRST.
; http://php.net/cgi.redirect-status-env
;cgi.redirect_status_env =
{% if php_cfg.cgi is defined and php_cfg.cgi.redirect_status_env is defined -%}
cgi.redirect_status_env = {{ php_cfg.cgi.redirect_status_env }}
{% endif %}

; cgi.fix_pathinfo provides *real* PATH_INFO/PATH_TRANSLATED support for CGI.  PHP's
; previous behaviour was to set PATH_TRANSLATED to SCRIPT_FILENAME, and to not grok
; what PATH_INFO is.  For more information on PATH_INFO, see the cgi specs.  Setting
; this to 1 will cause PHP CGI to fix its paths to conform to the spec.  A setting
; of zero causes PHP to behave as before.  Default is 1.  You should fix your scripts
; to use SCRIPT_FILENAME rather than PATH_TRANSLATED.
; http://php.net/cgi.fix-pathinfo
;cgi.fix_pathinfo=1
{% if php_cfg.cgi is defined and php_cfg.cgi.fix_pathinfo is defined -%}
cgi.fix_pathinfo = {{ php_cfg.cgi.fix_pathinfo }}
{% endif %}

; if cgi.discard_path is enabled, the PHP CGI binary can safely be placed outside
; of the web tree and people will not be able to circumvent .htaccess security.
; http://php.net/cgi.dicard-path
;cgi.discard_path=1
{% if php_cfg.cgi is defined and php_cfg.cgi.discard_path is defined -%}
cgi.discard_path = {{ php_cfg.cgi.discard_path }}
{% endif %}

; FastCGI under IIS (on WINNT based OS) supports the ability to impersonate
; security tokens of the calling client.  This allows IIS to define the
; security context that the request runs under.  mod_fastcgi under Apache
; does not currently support this feature (03/17/2002)
; Set to 1 if running under IIS.  Default is zero.
; http://php.net/fastcgi.impersonate
;fastcgi.impersonate = 1
{% if php_cfg.fastcgi is defined and php_cfg.fastcgi.impersonate is defined -%}
fastcgi.impersonate = {{ php_cfg.fastcgi.impersonate }}
{% endif %}

; Disable logging through FastCGI connection. PHP's default behavior is to enable
; this feature.
;fastcgi.logging = 0
{% if php_cfg.fastcgi is defined and php_cfg.fastcgi.logging is defined -%}
fastcgi.logging = {{ php_cfg.fastcgi.logging }}
{% endif %}

; cgi.rfc2616_headers configuration option tells PHP what type of headers to
; use when sending HTTP response code. If set to 0, PHP sends Status: header that
; is supported by Apache. When this option is set to 1, PHP will send
; RFC2616 compliant header.
; Default is zero.
; http://php.net/cgi.rfc2616-headers
;cgi.rfc2616_headers = 0
{% if php_cfg.cgi is defined and php_cfg.cgi.rfc2616_headers is defined -%}
cgi.rfc2616_headers = {{ php_cfg.cgi.rfc2616_headers }}
{% endif %}


; cgi.check_shebang_line controls whether CGI PHP checks for line starting with #!
; (shebang) at the top of the running script. This line might be needed if the
; script support running both as stand-alone script and via PHP CGI<. PHP in CGI
; mode skips this line and ignores its content if this directive is turned on.
; http://php.net/cgi.check-shebang-line
;cgi.check_shebang_line=1
{% if php_cfg.cgi is defined and php_cfg.cgi.check_shebang_line is defined -%}
cgi.check_shebang_line = {{ php_cfg.cgi.check_shebang_line }}
{% endif %}

;;;;;;;;;;;;;;;;
; File Uploads ;
;;;;;;;;;;;;;;;;

; Whether to allow HTTP file uploads.
; http://php.net/file-uploads
file_uploads = {{ 'On' if php_cfg.file_uploads else 'Off' }}

; Temporary directory for HTTP uploaded files (will use system default if not
; specified).
; http://php.net/upload-tmp-dir
;upload_tmp_dir =
{% if php_cfg.upload_tmp_dir is defined -%}
upload_tmp_dir = {{ php_cfg.upload_tmp_dir }}
{% endif %}

; Maximum allowed size for uploaded files.
; http://php.net/upload-max-filesize
upload_max_filesize = {{ php_cfg.upload_max_filesize }}

; Maximum number of files that can be uploaded via a single request
max_file_uploads = {{ php_cfg.max_file_uploads }}

;;;;;;;;;;;;;;;;;;
; Fopen wrappers ;
;;;;;;;;;;;;;;;;;;

; Whether to allow the treatment of URLs (like http:// or ftp://) as files.
; http://php.net/allow-url-fopen
allow_url_fopen = {{ 'On' if php_cfg.allow_url_fopen else 'Off' }}

; Whether to allow include/require to open URLs (like http:// or ftp://) as files.
; http://php.net/allow-url-include
allow_url_include = {{ 'On' if php_cfg.allow_url_include else 'Off' }}

; Define the anonymous ftp password (your email address). PHP's default setting
; for this is empty.
; http://php.net/from
;from="john@doe.com"
{% if php_cfg.from is defined -%}
from = "{{ php_cfg.from }}"
{% endif %}

; Define the User-Agent string. PHP's default setting for this is empty.
; http://php.net/user-agent
;user_agent="PHP"
{% if php_cfg.user_agent is defined -%}
user_agent = "{{ php_cfg.user_agent }}"
{% endif %}

; Default timeout for socket based streams (seconds)
; http://php.net/default-socket-timeout
default_socket_timeout = {{ php_cfg.default_socket_timeout }}

; If your scripts have to deal with files from Macintosh systems,
; or you are running on a Mac and need to deal with files from
; unix or win32 systems, setting this flag will cause PHP to
; automatically detect the EOL character in those files so that
; fgets() and file() will work regardless of the source of the file.
; http://php.net/auto-detect-line-endings
;auto_detect_line_endings = Off
{% if php_cfg.user_agent is defined -%}
auto_detect_line_endings = {{ 'On' if php_cfg.auto_detect_line_endings else 'Off' }}
{% endif %}

;;;;;;;;;;;;;;;;;;;;;;
; Dynamic Extensions ;
;;;;;;;;;;;;;;;;;;;;;;

; If you wish to have an extension loaded automatically, use the following
; syntax:
;
;   extension=modulename.extension
;
; For example, on Windows:
;
;   extension=msql.dll
;
; ... or under UNIX:
;
;   extension=msql.so
;
; ... or with a path:
;
;   extension=/path/to/extension/msql.so
;
; If you only provide the name of the extension, PHP will look for it in its
; default extension directory.

;;;;
; Note: packaged extension modules are now loaded via the .ini files
; found in the directory /etc/php.d; these are loaded by default.
;;;;

;;;;;;;;;;;;;;;;;;;
; Module Settings ;
;;;;;;;;;;;;;;;;;;;

[CLI Server]
; Whether the CLI web server uses ANSI color coding in its terminal output.
cli_server.color = {{ 'On' if php_cfg.cli_server.color else 'Off' }}

[Date]
; Defines the default timezone used by the date functions
; http://php.net/date.timezone
date.timezone = {{ php_cfg.date.timezone }}

; http://php.net/date.default-latitude
;date.default_latitude = 31.7667
{% if php_cfg.date.default_latitude is defined -%}
date.default_latitude = {{ php_cfg.date.default_latitude }}
{% endif %}

; http://php.net/date.default-longitude
;date.default_longitude = 35.2333
{% if php_cfg.date.default_longitude is defined -%}
date.default_longitude = {{ php_cfg.date.default_longitude }}
{% endif %}

; http://php.net/date.sunrise-zenith
;date.sunrise_zenith = 90.583333
{% if php_cfg.date.sunrise_zenith is defined -%}
date.sunrise_zenith = {{ php_cfg.date.sunrise_zenith }}
{% endif %}

; http://php.net/date.sunset-zenith
;date.sunset_zenith = 90.583333
{% if php_cfg.date.sunset_zenith is defined -%}
date.sunset_zenith = {{ php_cfg.date.sunset_zenith }}
{% endif %}

[filter]
; http://php.net/filter.default
;filter.default = unsafe_raw
{% if php_cfg.filter is defined and php_cfg.filter.default is defined -%}
filter.default = {{ php_cfg.filter.default }}
{% endif %}

; http://php.net/filter.default-flags
;filter.default_flags =
{% if php_cfg.filter is defined and php_cfg.filter.default_flags is defined -%}
filter.default_flags = {{ php_cfg.filter.default_flags }}
{% endif %}

[iconv]
; Use of this INI entry is deprecated, use global input_encoding instead.
; If empty, default_charset or input_encoding or iconv.input_encoding is used.
; The precedence is: default_charset < intput_encoding < iconv.input_encoding
;iconv.input_encoding =
{% if php_cfg.iconv is defined and php_cfg.iconv.input_encoding is defined -%}
iconv.input_encoding = {{ php_cfg.iconv.input_encoding }}
{% endif %}

; Use of this INI entry is deprecated, use global internal_encoding instead.
; If empty, default_charset or internal_encoding or iconv.internal_encoding is used.
; The precedence is: default_charset < internal_encoding < iconv.internal_encoding
;iconv.internal_encoding =
{% if php_cfg.iconv is defined and php_cfg.iconv.internal_encoding is defined -%}
iconv.internal_encoding = {{ php_cfg.iconv.internal_encoding }}
{% endif %}

; Use of this INI entry is deprecated, use global output_encoding instead.
; If empty, default_charset or output_encoding or iconv.output_encoding is used.
; The precedence is: default_charset < output_encoding < iconv.output_encoding
; To use an output encoding conversion, iconv's output handler must be set
; otherwise output encoding conversion cannot be performed.
;iconv.output_encoding =
{% if php_cfg.iconv is defined and php_cfg.iconv.output_encoding is defined -%}
iconv.output_encoding = {{ php_cfg.iconv.output_encoding }}
{% endif %}

[intl]
;intl.default_locale =
{% if php_cfg.intl is defined and php_cfg.intl.default_locale is defined -%}
intl.default_locale = {{ php_cfg.intl.default_locale }}
{% endif %}
; This directive allows you to produce PHP errors when some error
; happens within intl functions. The value is the level of the error produced.
; Default is 0, which does not produce any errors.
;intl.error_level = E_WARNING
;intl.use_exceptions = 0
{% if php_cfg.intl is defined and php_cfg.intl.error_level is defined -%}
intl.error_level = {{ php_cfg.intl.error_level }}
{% endif %}

[sqlite3]
;sqlite3.extension_dir =
{% if php_cfg.sqlite3 is defined and php_cfg.sqlite3.extension_dir is defined -%}
sqlite3.extension_dir = {{ php_cfg.sqlite3.extension_dir }}
{% endif %}

[Pcre]
;PCRE library backtracking limit.
; http://php.net/pcre.backtrack-limit
;pcre.backtrack_limit=100000
{% if php_cfg.pcre is defined and php_cfg.pcre.backtrack_limit is defined -%}
pcre.backtrack_limit = {{ php_cfg.pcre.backtrack_limit }}
{% endif %}

;PCRE library recursion limit.
;Please note that if you set this value to a high number you may consume all
;the available process stack and eventually crash PHP (due to reaching the
;stack size limit imposed by the Operating System).
; http://php.net/pcre.recursion-limit
;pcre.recursion_limit=100000
{% if php_cfg.pcre is defined and php_cfg.pcre.recursion_limit is defined -%}
pcre.recursion_limit = {{ php_cfg.pcre.recursion_limit }}
{% endif %}

;Enables or disables JIT compilation of patterns. This requires the PCRE
;library to be compiled with JIT support.
pcre.jit = {{ php_cfg.pcre.jit }}

[Pdo]
; Whether to pool ODBC connections. Can be one of "strict", "relaxed" or "off"
; http://php.net/pdo-odbc.connection-pooling
;pdo_odbc.connection_pooling=strict
{% if php_cfg.pdo_odbc is defined and php_cfg.pdo_odbc.connection_pooling is defined -%}
pdo_odbc.connection_pooling = {{ php_cfg.pdo_odbc.connection_pooling }}
{% endif %}

;pdo_odbc.db2_instance_name
{% if php_cfg.pdo_odbc is defined and php_cfg.pdo_odbc.db2_instance_name is defined -%}
pdo_odbc.db2_instance_name = {{ php_cfg.pdo_odbc.db2_instance_name }}
{% endif %}

[Pdo_mysql]
; If mysqlnd is used: Number of cache slots for the internal result set cache
; http://php.net/pdo_mysql.cache_size
pdo_mysql.cache_size = {{ php_cfg.pdo_mysql.cache_size }}

; Default socket name for local MySQL connects.  If empty, uses the built-in
; MySQL defaults.
; http://php.net/pdo_mysql.default-socket
pdo_mysql.default_socket = {{ php_cfg.pdo_mysql.default_socket }}

[Phar]
; http://php.net/phar.readonly
;phar.readonly = On
{% if php_cfg.phar is defined and php_cfg.phar.readonly is defined -%}
phar.readonly = {{ 'On' if php_cfg.php_cfg.phar.readonly else 'Off' }}
{% endif %}

; http://php.net/phar.require-hash
;phar.require_hash = On
{% if php_cfg.phar is defined and php_cfg.phar.require_hash is defined -%}
phar.require_hash = {{ 'On' if php_cfg.php_cfg.phar.require_hash else 'Off' }}
{% endif %}

;phar.cache_list =
{% if php_cfg.phar is defined and php_cfg.phar.cache_list is defined -%}
phar.cache_list = {{ 'On' if php_cfg.php_cfg.phar.cache_list else 'Off' }}
{% endif %}

[mail function]
; For Unix only.  You may supply arguments as well (default: "sendmail -t -i").
; http://php.net/sendmail-path
{% if php_cfg.sendmail_path is defined -%}
sendmail_path = {{ php_cfg.sendmail_path }}
{% endif %}

; Force the addition of the specified parameters to be passed as extra parameters
; to the sendmail binary. These parameters will always replace the value of
; the 5th parameter to mail().
;mail.force_extra_parameters =
{% if php_cfg.mail.force_extra_parameters is defined -%}
mail.force_extra_parameters = {{ php_cfg.mail.force_extra_parameters }}
{% endif %}

; Add X-PHP-Originating-Script: that will include uid of the script followed by the filename
mail.add_x_header = {{ 'On' if php_cfg.mail.add_x_header else 'Off' }}

; The path to a log file that will log all mail() calls. Log entries include
; the full path of the script, line number, To address and headers.
;mail.log =
; Log mail to syslog;
;mail.log = syslog
{% if php_cfg.mail.log is defined -%}
mail.log = {{ php_cfg.mail.log }}
{% endif %}

[SQL]
; http://php.net/sql.safe-mode
sql.safe_mode = {{ 'On' if php_cfg.sql.safe_mode else 'Off' }}

[ODBC]
; http://php.net/odbc.default-db
;odbc.default_db    =  Not yet implemented
{% if php_cfg.odbc.default_db is defined -%}
odbc.default_db = {{ php_cfg.odbc.default_db }}
{% endif %}

; http://php.net/odbc.default-user
;odbc.default_user  =  Not yet implemented
{% if php_cfg.odbc.default_user is defined -%}
odbc.default_user = {{ php_cfg.odbc.default_user }}
{% endif %}

; http://php.net/odbc.default-pw
;odbc.default_pw    =  Not yet implemented
{% if php_cfg.odbc.default_pw is defined -%}
odbc.default_pw = {{ php_cfg.odbc.default_pw }}
{% endif %}

; Controls the ODBC cursor model.
; Default: SQL_CURSOR_STATIC (default).
;odbc.default_cursortype
{% if php_cfg.odbc.default_cursortype is defined -%}
odbc.default_cursortype = {{ php_cfg.odbc.default_cursortype }}
{% endif %}

; Allow or prevent persistent links.
; http://php.net/odbc.allow-persistent
odbc.allow_persistent = {{ 'On' if php_cfg.odbc.allow_persistent else 'Off' }}

; Check that a connection is still valid before reuse.
; http://php.net/odbc.check-persistent
odbc.check_persistent = {{ 'On' if php_cfg.odbc.check_persistent else 'Off' }}

; Maximum number of persistent links.  -1 means no limit.
; http://php.net/odbc.max-persistent
odbc.max_persistent = {{ php_cfg.odbc.max_persistent }}

; Maximum number of links (persistent + non-persistent).  -1 means no limit.
; http://php.net/odbc.max-links
odbc.max_links = {{ php_cfg.odbc.max_links }}

; Handling of LONG fields.  Returns number of bytes to variables.  0 means
; passthru.
; http://php.net/odbc.defaultlrl
odbc.defaultlrl = {{ php_cfg.odbc.defaultlrl }}

; Handling of binary data.  0 means passthru, 1 return as is, 2 convert to char.
; See the documentation on odbc_binmode and odbc_longreadlen for an explanation
; of odbc.defaultlrl and odbc.defaultbinmode
; http://php.net/odbc.defaultbinmode
odbc.defaultbinmode = {{ php_cfg.odbc.defaultbinmode }}

;birdstep.max_links = -1
{% if php_cfg.birdstep is defined and php_cfg.birdstep.max_links is defined -%}
birdstep.max_links = {{ php_cfg.birdstep.max_links }}
{% endif %}

[Interbase]
; Allow or prevent persistent links.
ibase.allow_persistent = {{ php_cfg.ibase.allow_persistent }}

; Maximum number of persistent links.  -1 means no limit.
ibase.max_persistent = {{ php_cfg.ibase.max_persistent }}

; Maximum number of links (persistent + non-persistent).  -1 means no limit.
ibase.max_links = {{ php_cfg.ibase.max_links }}

; Default database name for ibase_connect().
;ibase.default_db =
{% if php_cfg.ibase.default_db is defined -%}
ibase.default_db = {{ php_cfg.ibase.default_db }}
{% endif %}

; Default username for ibase_connect().
;ibase.default_user =
{% if php_cfg.ibase.default_user is defined -%}
ibase.default_user = {{ php_cfg.ibase.default_user }}
{% endif %}

; Default password for ibase_connect().
;ibase.default_password =
{% if php_cfg.ibase.default_password is defined -%}
ibase.default_password = {{ php_cfg.ibase.default_password }}
{% endif %}

; Default charset for ibase_connect().
;ibase.default_charset =
{% if php_cfg.ibase.default_charset is defined -%}
ibase.default_charset = {{ php_cfg.ibase.default_charset }}
{% endif %}

; Default timestamp format.
ibase.timestampformat = "{{ php_cfg.ibase.timestampformat }}"

; Default date format.
ibase.dateformat = "{{ php_cfg.ibase.dateformat }}"

; Default time format.
ibase.timeformat = "{{ php_cfg.ibase.timeformat }}"

{% if php_version is version('7.0', '<')  -%}
[MySQL]
; Allow accessing, from PHP's perspective, local files with LOAD DATA statements
; http://php.net/mysql.allow_local_infile
mysql.allow_local_infile = {{ 'On' if php_cfg.mysql.allow_local_infile else 'Off' }}

; Allow or prevent persistent links.
; http://php.net/mysql.allow-persistent
mysql.allow_persistent = {{ 'On' if php_cfg.mysql.allow_persistent else 'Off' }}

; If mysqlnd is used: Number of cache slots for the internal result set cache
; http://php.net/mysql.cache_size
mysql.cache_size = {{ php_cfg.mysql.cache_size }}

; Maximum number of persistent links.  -1 means no limit.
; http://php.net/mysql.max-persistent
mysql.max_persistent = {{ php_cfg.mysql.max_persistent }}

; Maximum number of links (persistent + non-persistent).  -1 means no limit.
; http://php.net/mysql.max-links
mysql.max_links = {{ php_cfg.mysql.max_links }}

; Default port number for mysql_connect().  If unset, mysql_connect() will use
; the $MYSQL_TCP_PORT or the mysql-tcp entry in /etc/services or the
; compile-time value defined MYSQL_PORT (in that order).  Win32 will only look
; at MYSQL_PORT.
; http://php.net/mysql.default-port
mysql.default_port = {{ php_cfg.mysql.default_port }}

; Default socket name for local MySQL connects.  If empty, uses the built-in
; MySQL defaults.
; http://php.net/mysql.default-socket
mysql.default_socket = {{ php_cfg.mysql.default_socket }}

; Default host for mysql_connect() (doesn't apply in safe mode).
; http://php.net/mysql.default-host
mysql.default_host = {{ php_cfg.mysql.default_host }}

; Default user for mysql_connect() (doesn't apply in safe mode).
; http://php.net/mysql.default-user
mysql.default_user = {{ php_cfg.mysql.default_user }}

; Default password for mysql_connect() (doesn't apply in safe mode).
; Note that this is generally a *bad* idea to store passwords in this file.
; *Any* user with PHP access can run 'echo get_cfg_var("mysql.default_password")
; and reveal this password!  And of course, any users with read access to this
; file will be able to reveal the password as well.
; http://php.net/mysql.default-password
mysql.default_password = {{ php_cfg.mysql.default_password }}

; Maximum time (in seconds) for connect timeout. -1 means no limit
; http://php.net/mysql.connect-timeout
mysql.connect_timeout = {{ php_cfg.mysql.connect_timeout }}

; Trace mode. When trace_mode is active (=On), warnings for table/index scans and
; SQL-Errors will be displayed.
; http://php.net/mysql.trace-mode
mysql.trace_mode = {{ 'On' if php_cfg.mysql.trace_mode else 'Off' }}
{% endif %}
[MySQLi]

; Maximum number of persistent links.  -1 means no limit.
; http://php.net/mysqli.max-persistent
mysqli.max_persistent = {{ php_cfg.mysqli.max_persistent }}

; Allow accessing, from PHP's perspective, local files with LOAD DATA statements
; http://php.net/mysqli.allow_local_infile
;mysqli.allow_local_infile = On
{% if php_cfg.mysqli.allow_local_infile is defined -%}
mysqli.allow_local_infile = {{ 'On' if php_cfg.mysqli.allow_local_infile else 'Off' }}
{% endif %}

; Allow or prevent persistent links.
; http://php.net/mysqli.allow-persistent
mysqli.allow_persistent = {{ 'On' if php_cfg.mysqli.allow_persistent else 'Off' }}

; Maximum number of links.  -1 means no limit.
; http://php.net/mysqli.max-links
mysqli.max_links = {{ php_cfg.mysqli.max_links }}

; If mysqlnd is used: Number of cache slots for the internal result set cache
; http://php.net/mysqli.cache_size
mysqli.cache_size = {{ php_cfg.mysqli.cache_size }}

; Default port number for mysqli_connect().  If unset, mysqli_connect() will use
; the $MYSQL_TCP_PORT or the mysql-tcp entry in /etc/services or the
; compile-time value defined MYSQL_PORT (in that order).  Win32 will only look
; at MYSQL_PORT.
; http://php.net/mysqli.default-port
mysqli.default_port = {{ php_cfg.mysqli.default_port }}

; Default socket name for local MySQL connects.  If empty, uses the built-in
; MySQL defaults.
; http://php.net/mysqli.default-socket
mysqli.default_socket = {{ php_cfg.mysqli.default_socket }}

; Default host for mysql_connect() (doesn't apply in safe mode).
; http://php.net/mysqli.default-host
mysqli.default_host = {{ php_cfg.mysqli.default_host }}

; Default user for mysql_connect() (doesn't apply in safe mode).
; http://php.net/mysqli.default-user
mysqli.default_user = {{ php_cfg.mysqli.default_user }}

; Default password for mysqli_connect() (doesn't apply in safe mode).
; Note that this is generally a *bad* idea to store passwords in this file.
; *Any* user with PHP access can run 'echo get_cfg_var("mysqli.default_pw")
; and reveal this password!  And of course, any users with read access to this
; file will be able to reveal the password as well.
; http://php.net/mysqli.default-pw
mysqli.default_pw = {{ php_cfg.mysqli.default_pw }}

; Allow or prevent reconnect
mysqli.reconnect = {{ 'On' if php_cfg.mysqli.reconnect else 'Off' }}

[mysqlnd]
; Enable / Disable collection of general statistics by mysqlnd which can be
; used to tune and monitor MySQL operations.
; http://php.net/mysqlnd.collect_statistics
mysqlnd.collect_statistics = {{ 'On' if php_cfg.mysqlnd.collect_statistics else 'Off' }}

; Enable / Disable collection of memory usage statistics by mysqlnd which can be
; used to tune and monitor MySQL operations.
; http://php.net/mysqlnd.collect_memory_statistics
mysqlnd.collect_memory_statistics = {{ 'On' if php_cfg.mysqlnd.collect_memory_statistics else 'Off' }}

; Records communication from all extensions using mysqlnd to the specified log
; file.
; http://php.net/mysqlnd.debug
;mysqlnd.debug =
{% if php_cfg.mysqlnd.debug is defined -%}
mysqlnd.debug ={{ 'On' if php_cfg.mysqlnd.debug else 'Off' }}
{% endif %}

; Defines which queries will be logged.
; http://php.net/mysqlnd.log_mask
;mysqlnd.log_mask = 0
{% if php_cfg.mysqlnd.log_mask is defined -%}
mysqlnd.log_mask = {{ php_cfg.mysqlnd.log_mask }}
{% endif %}

; Default size of the mysqlnd memory pool, which is used by result sets.
; http://php.net/mysqlnd.mempool_default_size
;mysqlnd.mempool_default_size = 16000
{% if php_cfg.mysqlnd.mempool_default_size is defined -%}
mysqlnd.mempool_default_size = {{ php_cfg.mysqlnd.mempool_default_size }}
{% endif %}

; Size of a pre-allocated buffer used when sending commands to MySQL in bytes.
; http://php.net/mysqlnd.net_cmd_buffer_size
;mysqlnd.net_cmd_buffer_size = 2048
{% if php_cfg.mysqlnd.net_cmd_buffer_size is defined -%}
mysqlnd.net_cmd_buffer_size = {{ php_cfg.mysqlnd.net_cmd_buffer_size }}
{% endif %}

; Size of a pre-allocated buffer used for reading data sent by the server in
; bytes.
; http://php.net/mysqlnd.net_read_buffer_size
;mysqlnd.net_read_buffer_size = 32768
{% if php_cfg.mysqlnd.net_read_buffer_size is defined -%}
mysqlnd.net_read_buffer_size = {{ php_cfg.mysqlnd.net_read_buffer_size }}
{% endif %}

; Timeout for network requests in seconds.
; http://php.net/mysqlnd.net_read_timeout
;mysqlnd.net_read_timeout = 31536000
{% if php_cfg.mysqlnd.net_read_timeout is defined -%}
mysqlnd.net_read_timeout = {{ php_cfg.mysqlnd.net_read_timeout }}
{% endif %}

; SHA-256 Authentication Plugin related. File with the MySQL server public RSA
; key.
; http://php.net/mysqlnd.sha256_server_public_key
;mysqlnd.sha256_server_public_key =
{% if php_cfg.mysqlnd.sha256_server_public_key is defined -%}
mysqlnd.sha256_server_public_key = {{ php_cfg.mysqlnd.sha256_server_public_key }}
{% endif %}

[PostgreSQL]
; Allow or prevent persistent links.
; http://php.net/pgsql.allow-persistent
pgsql.allow_persistent = {{ 'On' if php_cfg.pgsql.allow_persistent else 'Off' }}

; Detect broken persistent links always with pg_pconnect().
; Auto reset feature requires a little overheads.
; http://php.net/pgsql.auto-reset-persistent
pgsql.auto_reset_persistent = {{ 'On' if php_cfg.pgsql.auto_reset_persistent else 'Off' }}

; Maximum number of persistent links.  -1 means no limit.
; http://php.net/pgsql.max-persistent
pgsql.max_persistent = {{ php_cfg.pgsql.max_persistent }}

; Maximum number of links (persistent+non persistent).  -1 means no limit.
; http://php.net/pgsql.max-links
pgsql.max_links = {{ php_cfg.pgsql.max_links }}

; Ignore PostgreSQL backends Notice message or not.
; Notice message logging require a little overheads.
; http://php.net/pgsql.ignore-notice
pgsql.ignore_notice = {{ php_cfg.pgsql.ignore_notice }}

; Log PostgreSQL backends Notice message or not.
; Unless pgsql.ignore_notice=0, module cannot log notice message.
; http://php.net/pgsql.log-notice
pgsql.log_notice = {{ php_cfg.pgsql.log_notice }}

[bcmath]
; Number of decimal digits for all bcmath functions.
; http://php.net/bcmath.scale
bcmath.scale = {{ php_cfg.bcmath.scale }}

[browscap]
; http://php.net/browscap
;browscap = extra/browscap.ini
{% if php_cfg.browscap is defined -%}
browscap = {{ php_cfg.browscap }}
{% endif %}

[Session]
; Handler used to store/retrieve data.
; http://php.net/session.save-handler
session.save_handler = {{ php_cfg.session.save_handler }}

; Argument passed to save_handler.  In the case of files, this is the path
; where data files are stored. Note: Windows users have to change this
; variable in order to use PHP's session functions.
;
; The path can be defined as:
;
;     session.save_path = "N;/path"
;
; where N is an integer.  Instead of storing all the session files in
; /path, what this will do is use subdirectories N-levels deep, and
; store the session data in those directories.  This is useful if
; your OS has problems with many files in one directory, and is
; a more efficient layout for servers that handle many sessions.
;
; NOTE 1: PHP will not create this directory structure automatically.
;         You can use the script in the ext/session dir for that purpose.
; NOTE 2: See the section on garbage collection below if you choose to
;         use subdirectories for session storage
;
; The file storage module creates files using mode 600 by default.
; You can change that by using
;
;     session.save_path = "N;MODE;/path"
;
; where MODE is the octal representation of the mode. Note that this
; does not overwrite the process's umask.
; http://php.net/session.save-path

; RPM note : session directory must be owned by process owner
; for mod_php, see /etc/httpd/conf.d/php.conf
; for php-fpm, see /etc/php-fpm.d/*conf
;session.save_path = "/tmp"
{% if php_cfg.session.save_path is defined -%}
session.save_path = {{ php_cfg.session.save_path }}
{% endif %}

; Whether to use strict session mode.
; Strict session mode does not accept uninitialized session ID and regenerate
; session ID if browser sends uninitialized session ID. Strict mode protects
; applications from session fixation via session adoption vulnerability. It is
; disabled by default for maximum compatibility, but enabling it is encouraged.
; https://wiki.php.net/rfc/strict_sessions
session.use_strict_mode = {{ 'On' if php_cfg.session.use_strict_mode else 'Off' }}

; Whether to use cookies.
; http://php.net/session.use-cookies
session.use_cookies = {{ 'On' if php_cfg.session.use_cookies else 'Off' }}

; http://php.net/session.cookie-secure
;session.cookie_secure =
{% if php_cfg.session.cookie_secure is defined -%}
session.cookie_secure = {{ 'On' if php_cfg.session.cookie_secure else 'Off' }}
{% endif %}

; This option forces PHP to fetch and use a cookie for storing and maintaining
; the session id. We encourage this operation as it's very helpful in combating
; session hijacking when not specifying and managing your own session id. It is
; not the be-all and end-all of session hijacking defense, but it's a good start.
; http://php.net/session.use-only-cookies
session.use_only_cookies = {{ 'On' if php_cfg.session.use_only_cookies else 'Off' }}

; Name of the session (used as cookie name).
; http://php.net/session.name
session.name = {{ php_cfg.session.name }}

; Initialize session on request startup.
; http://php.net/session.auto-start
session.auto_start = {{ 'On' if php_cfg.session.auto_start else 'Off' }}

; Lifetime in seconds of cookie or, if 0, until browser is restarted.
; http://php.net/session.cookie-lifetime
session.cookie_lifetime = {{ php_cfg.session.cookie_lifetime }}

; The path for which the cookie is valid.
; http://php.net/session.cookie-path
session.cookie_path = {{ php_cfg.session.cookie_path }}

; The domain for which the cookie is valid.
; http://php.net/session.cookie-domain
session.cookie_domain = {{ php_cfg.session.cookie_domain }}

; Whether or not to add the httpOnly flag to the cookie, which makes it inaccessible to browser scripting languages such as JavaScript.
; http://php.net/session.cookie-httponly
session.cookie_httponly = {{ 'On' if php_cfg.session.cookie_httponly else 'Off' }}

; Handler used to serialize data.  php is the standard serializer of PHP.
; http://php.net/session.serialize-handler
session.serialize_handler = {{ php_cfg.session.serialize_handler }}

; Defines the probability that the 'garbage collection' process is started
; on every session initialization. The probability is calculated by using
; gc_probability/gc_divisor. Where session.gc_probability is the numerator
; and gc_divisor is the denominator in the equation. Setting this value to 1
; when the session.gc_divisor value is 100 will give you approximately a 1% chance
; the gc will run on any give request.
; Default Value: 1
; Development Value: 1
; Production Value: 1
; http://php.net/session.gc-probability
session.gc_probability = {{ php_cfg.session.gc_probability }}

; Defines the probability that the 'garbage collection' process is started on every
; session initialization. The probability is calculated by using the following equation:
; gc_probability/gc_divisor. Where session.gc_probability is the numerator and
; session.gc_divisor is the denominator in the equation. Setting this value to 1
; when the session.gc_divisor value is 100 will give you approximately a 1% chance
; the gc will run on any give request. Increasing this value to 1000 will give you
; a 0.1% chance the gc will run on any give request. For high volume production servers,
; this is a more efficient approach.
; Default Value: 100
; Development Value: 1000
; Production Value: 1000
; http://php.net/session.gc-divisor
session.gc_divisor = {{ php_cfg.session.gc_divisor }}

; After this number of seconds, stored data will be seen as 'garbage' and
; cleaned up by the garbage collection process.
; http://php.net/session.gc-maxlifetime
session.gc_maxlifetime = {{ php_cfg.session.gc_maxlifetime }}

; NOTE: If you are using the subdirectory option for storing session files
;       (see session.save_path above), then garbage collection does *not*
;       happen automatically.  You will need to do your own garbage
;       collection through a shell script, cron entry, or some other method.
;       For example, the following script would is the equivalent of
;       setting session.gc_maxlifetime to 1440 (1440 seconds = 24 minutes):
;          find /path/to/sessions -cmin +24 -type f | xargs rm

; Check HTTP Referer to invalidate externally stored URLs containing ids.
; HTTP_REFERER has to contain this substring for the session to be
; considered as valid.
; http://php.net/session.referer-check
session.referer_check = {{ php_cfg.session.referer_check }}

{% if php_version is version('7.1', '<') -%}
; How many bytes to read from the file.
; http://php.net/session.entropy-length
;session.entropy_length = 32
{% if php_cfg.session.entropy_length is defined -%}
session.entropy_length = {{ php_cfg.session.entropy_length }}
{% endif %}

; Specified here to create the session id.
; http://php.net/session.entropy-file
; Defaults to /dev/urandom
; On systems that don't have /dev/urandom but do have /dev/arandom, this will default to /dev/arandom
; If neither are found at compile time, the default is no entropy file.
; On windows, setting the entropy_length setting will activate the
; Windows random source (using the CryptoAPI)
;session.entropy_file = /dev/urandom
{% if php_cfg.session.entropy_file is defined -%}
session.entropy_file = {{ php_cfg.session.entropy_file }}
{% endif %}
{% endif %}

; Set to {nocache,private,public,} to determine HTTP caching aspects
; or leave this empty to avoid sending anti-caching headers.
; http://php.net/session.cache-limiter
session.cache_limiter = {{ php_cfg.session.cache_limiter }}

; Document expires after n minutes.
; http://php.net/session.cache-expire
session.cache_expire = {{ php_cfg.session.cache_expire }}

; trans sid support is disabled by default.
; Use of trans sid may risk your users' security.
; Use this option with caution.
; - User may send URL contains active session ID
;   to other person via. email/irc/etc.
; - URL that contains active session ID may be stored
;   in publicly accessible computer.
; - User may access your site with the same session ID
;   always using URL stored in browser's history or bookmarks.
; http://php.net/session.use-trans-sid
session.use_trans_sid = {{ 'On' if php_cfg.session.use_trans_sid else 'Off' }}

{% if php_version is version('7.1', '>=') -%}
; Set session ID character length. This value could be between 22 to 256.
; Shorter length than default is supported only for compatibility reason.
; Users should use 32 or more chars.
; http://php.net/session.sid_length
; Default Value: 32
; Development Value: 26
; Production Value: 26
{% if php_cfg.session.sid_length is defined -%}
session.sid_length = {{ php_cfg.session.sid_length }}
{% endif %}

; The URL rewriter will look for URLs in a defined set of HTML tags.
; <form> is special; if you include them here, the rewriter will
; add a hidden <input> field with the info which is otherwise appended
; to URLs. <form> tag's action attribute URL will not be modified
; unless it is specified.
; Note that all valid entries require a "=", even if no value follows.
; Default Value: "a=href,area=href,frame=src,form="
; Development Value: "a=href,area=href,frame=src,form="
; Production Value: "a=href,area=href,frame=src,form="
; http://php.net/url-rewriter.tags
{% if php_cfg.session.trans_sid_tags is defined -%}
session.trans_sid_tags = "{{ php_cfg.session.trans_sid_tags }}"
{% endif %}

; URL rewriter does not rewrite absolute URLs by default.
; To enable rewrites for absolute pathes, target hosts must be specified
; at RUNTIME. i.e. use ini_set()
; <form> tags is special. PHP will check action attribute's URL regardless
; of session.trans_sid_tags setting.
; If no host is defined, HTTP_HOST will be used for allowed host.
; Example value: php.net,www.php.net,wiki.php.net
; Use "," for multiple hosts. No spaces are allowed.
; Default Value: ""
; Development Value: ""
; Production Value: ""
;session.trans_sid_hosts=""
{% if php_cfg.session.trans_sid_hosts is defined -%}
session.trans_sid_hosts = "{{ php_cfg.session.trans_sid_hosts }}"
{% endif %}
{% endif %}

{% if php_version is version('7.1', '<') and php_cfg.session.hash_function is defined -%}
; Select a hash function for use in generating session ids.
; Possible Values
;   0  (MD5 128 bits)
;   1  (SHA-1 160 bits)
; This option may also be set to the name of any hash function supported by
; the hash extension. A list of available hashes is returned by the hash_algos()
; function.
; http://php.net/session.hash-function
session.hash_function = {{ php_cfg.session.hash_function }}
{% endif %}


; Define how many bits are stored in each character when converting
; the binary hash data to something readable.
; Possible values:
;   4  (4 bits: 0-9, a-f)
;   5  (5 bits: 0-9, a-v)
;   6  (6 bits: 0-9, a-z, A-Z, "-", ",")
; Default Value: 4
; Development Value: 5
; Production Value: 5
; http://php.net/session.hash-bits-per-character
{% if php_version is version('7.1', '<') and php_cfg.session.hash_bits_per_character is defined -%}
session.hash_bits_per_character = {{ php_cfg.session.hash_bits_per_character }}
{% endif %}
{% if php_version is version('7.1', '>=') and php_cfg.session.sid_bits_per_character is defined -%}
session.sid_bits_per_character = {{ php_cfg.session.sid_bits_per_character }}
{% endif %}

; Enable upload progress tracking in $_SESSION
; Default Value: On
; Development Value: On
; Production Value: On
; http://php.net/session.upload-progress.enabled
;session.upload_progress.enabled = On
{% if php_cfg.session.upload_progress is defined and php_cfg.session.upload_progress.enabled is defined -%}
session.upload_progress.enabled = {{ 'On' if php_cfg.session.upload_progress.enabled else 'Off' }}
{% endif %}

; Cleanup the progress information as soon as all POST data has been read
; (i.e. upload completed).
; Default Value: On
; Development Value: On
; Production Value: On
; http://php.net/session.upload-progress.cleanup
;session.upload_progress.cleanup = On
{% if php_cfg.session.upload_progress is defined and php_cfg.session.upload_progress.cleanup is defined -%}
session.upload_progress.cleanup = {{ 'On' if php_cfg.session.upload_progress.cleanup else 'Off' }}
{% endif %}

; A prefix used for the upload progress key in $_SESSION
; Default Value: "upload_progress_"
; Development Value: "upload_progress_"
; Production Value: "upload_progress_"
; http://php.net/session.upload-progress.prefix
;session.upload_progress.prefix = "upload_progress_"
{% if php_cfg.session.upload_progress is defined and php_cfg.session.upload_progress.prefix is defined -%}
session.upload_progress.prefix = {{ php_cfg.session.upload_progress.prefix }}
{% endif %}

; The index name (concatenated with the prefix) in $_SESSION
; containing the upload progress information
; Default Value: "PHP_SESSION_UPLOAD_PROGRESS"
; Development Value: "PHP_SESSION_UPLOAD_PROGRESS"
; Production Value: "PHP_SESSION_UPLOAD_PROGRESS"
; http://php.net/session.upload-progress.name
;session.upload_progress.name = "PHP_SESSION_UPLOAD_PROGRESS"
{% if php_cfg.session.upload_progress is defined and php_cfg.session.upload_progress.name is defined -%}
session.upload_progress.name = {{ php_cfg.session.upload_progress.name }}
{% endif %}

; How frequently the upload progress should be updated.
; Given either in percentages (per-file), or in bytes
; Default Value: "1%"
; Development Value: "1%"
; Production Value: "1%"
; http://php.net/session.upload-progress.freq
;session.upload_progress.freq =  "1%"
{% if php_cfg.session.upload_progress is defined and php_cfg.session.upload_progress.freq is defined -%}
session.upload_progress.freq = "{{ php_cfg.session.upload_progress.freq }}"
{% endif %}

; The minimum delay between updates, in seconds
; Default Value: 1
; Development Value: 1
; Production Value: 1
; http://php.net/session.upload-progress.min-freq
;session.upload_progress.min_freq = "1"
{% if php_cfg.session.upload_progress is defined and php_cfg.session.upload_progress.min_freq is defined -%}
session.upload_progress.min_freq = {{ php_cfg.session.upload_progress.min_freq }}
{% endif %}

; Only write session data when session data is changed. Enabled by default.
; http://php.net/session.lazy-write
;session.lazy_write = On
{% if php_cfg.session.lazy_write is defined -%}
session.lazy_write = {{ 'On' if php_cfg.session.lazy_write else 'Off' }}
{% endif %}

[Assertion]
; Switch whether to compile assertions at all (to have no overhead at run-time)
; -1: Do not compile at all
;  0: Jump over assertion at run-time
;  1: Execute assertions
; Changing from or to a negative value is only possible in php.ini! (For turning assertions on and off at run-time, see assert.active, when zend.assertions = 1)
; Default Value: 1
; Development Value: 1
; Production Value: -1
; http://php.net/zend.assertions
zend.assertions = {{ php_cfg.zend.assertions }}

; Assert(expr); active by default.
; http://php.net/assert.active
;assert.active = On
{% if php_cfg.assert is defined and php_cfg.assert.active is defined -%}
assert.active = {{ 'On' if php_cfg.assert.active else 'Off' }}
{% endif %}

; Throw an AssertationException on failed assertions
; http://php.net/assert.exception
;assert.exception = On
{% if php_cfg.assert is defined and php_cfg.assert.exception is defined -%}
assert.exception = {{ 'On' if php_cfg.assert.exception else 'Off' }}
{% endif %}

; Issue a PHP warning for each failed assertion. (Overridden by assert.exception if active)
; http://php.net/assert.warning
;assert.warning = On
{% if php_cfg.assert is defined and php_cfg.assert.warning is defined -%}
assert.warning = {{ 'On' if php_cfg.assert.warning else 'Off' }}
{% endif %}

; Don't bail out by default.
; http://php.net/assert.bail
;assert.bail = Off
{% if php_cfg.assert is defined and php_cfg.assert.bail is defined -%}
assert.bail = {{ 'On' if php_cfg.assert.bail else 'Off' }}
{% endif %}

; User-function to be called if an assertion fails.
; http://php.net/assert.callback
;assert.callback = 0
{% if php_cfg.assert is defined and php_cfg.assert.callback is defined -%}
assert.callback = {{ php_cfg.assert.callback }}
{% endif %}

; Eval the expression with current error_reporting().  Set to true if you want
; error_reporting(0) around the eval().
; http://php.net/assert.quiet-eval
;assert.quiet_eval = 0
{% if php_cfg.assert is defined and php_cfg.assert.callback is defined -%}
assert.quiet_eval = {{ php_cfg.assert.quiet_eval }}
{% endif %}

[mbstring]
; language for internal character representation.
; This affects mb_send_mail() and mbstring.detect_order.
; http://php.net/mbstring.language
;mbstring.language = Japanese
{% if php_cfg.mbstring is defined and php_cfg.mbstring.language is defined -%}
mbstring.language = {{ php_cfg.mbstring.language }}
{% endif %}

; Use of this INI entry is deprecated, use global internal_encoding instead.
; internal/script encoding.
; Some encoding cannot work as internal encoding. (e.g. SJIS, BIG5, ISO-2022-*)
; If empty, default_charset or internal_encoding or iconv.internal_encoding is used.
; The precedence is: default_charset < internal_encoding < iconv.internal_encoding
;mbstring.internal_encoding =
{% if php_cfg.mbstring is defined and php_cfg.mbstring.internal_encoding is defined -%}
mbstring.internal_encoding = {{ php_cfg.mbstring.internal_encoding }}
{% endif %}

; Use of this INI entry is deprecated, use global input_encoding instead.
; http input encoding.
; mbstring.encoding_traslation = On is needed to use this setting.
; If empty, default_charset or input_encoding or mbstring.input is used.
; The precedence is: default_charset < intput_encoding < mbsting.http_input
; http://php.net/mbstring.http-input
;mbstring.http_input =
{% if php_cfg.mbstring is defined and php_cfg.mbstring.http_input is defined -%}
mbstring.http_input = {{ php_cfg.mbstring.http_input }}
{% endif %}

; Use of this INI entry is deprecated, use global output_encoding instead.
; http output encoding.
; mb_output_handler must be registered as output buffer to function.
; If empty, default_charset or output_encoding or mbstring.http_output is used.
; The precedence is: default_charset < output_encoding < mbstring.http_output
; To use an output encoding conversion, mbstring's output handler must be set
; otherwise output encoding conversion cannot be performed.
; http://php.net/mbstring.http-output
;mbstring.http_output =
{% if php_cfg.mbstring is defined and php_cfg.mbstring.http_output is defined -%}
mbstring.http_output = {{ php_cfg.mbstring.http_output }}
{% endif %}

; enable automatic encoding translation according to
; mbstring.internal_encoding setting. Input chars are
; converted to internal encoding by setting this to On.
; Note: Do _not_ use automatic encoding translation for
;       portable libs/applications.
; http://php.net/mbstring.encoding-translation
;mbstring.encoding_translation = Off
{% if php_cfg.mbstring is defined and php_cfg.mbstring.encoding_translation is defined -%}
mbstring.encoding_translation = {{ 'On' if php_cfg.mbstring.encoding_translation else 'Off' }}
{% endif %}

; automatic encoding detection order.
; "auto" detect order is changed according to mbstring.language
; http://php.net/mbstring.detect-order
;mbstring.detect_order = auto
{% if php_cfg.mbstring is defined and php_cfg.mbstring.detect_order is defined -%}
mbstring.detect_order = {{ php_cfg.mbstring.detect_order }}
{% endif %}

; substitute_character used when character cannot be converted
; one from another
; http://php.net/mbstring.substitute-character
;mbstring.substitute_character = none
{% if php_cfg.mbstring is defined and php_cfg.mbstring.substitute_character is defined -%}
mbstring.substitute_character = {{ php_cfg.mbstring.substitute_character }}
{% endif %}

; overload(replace) single byte functions by mbstring functions.
; mail(), ereg(), etc are overloaded by mb_send_mail(), mb_ereg(),
; etc. Possible values are 0,1,2,4 or combination of them.
; For example, 7 for overload everything.
; 0: No overload
; 1: Overload mail() function
; 2: Overload str*() functions
; 4: Overload ereg*() functions
; http://php.net/mbstring.func-overload
;mbstring.func_overload = 0
{% if php_cfg.mbstring is defined and php_cfg.mbstring.func_overload is defined -%}
mbstring.func_overload = {{ php_cfg.mbstring.func_overload }}
{% endif %}

; enable strict encoding detection.
; Default: Off
;mbstring.strict_detection = On
{% if php_cfg.mbstring is defined and php_cfg.mbstring.strict_detection is defined -%}
mbstring.strict_detection = {{ 'On' if php_cfg.mbstring.strict_detection else 'Off' }}
{% endif %}

; This directive specifies the regex pattern of content types for which mb_output_handler()
; is activated.
; Default: mbstring.http_output_conv_mimetype=^(text/|application/xhtml\+xml)
;mbstring.http_output_conv_mimetype=
{% if php_cfg.mbstring is defined and php_cfg.mbstring.http_output_conv_mimetype is defined -%}
mbstring.http_output_conv_mimetype = {{ php_cfg.mbstring.http_output_conv_mimetype }}
{% endif %}

[gd]
; Tell the jpeg decode to ignore warnings and try to create
; a gd image. The warning will then be displayed as notices
; disabled by default
; http://php.net/gd.jpeg-ignore-warning
;gd.jpeg_ignore_warning = 1
{% if php_cfg.gd is defined and php_cfg.gd.jpeg_ignore_warning is defined -%}
gd.jpeg_ignore_warning = {{ 'On' if php_cfg.gd.jpeg_ignore_warning else 'Off' }}
{% endif %}

[exif]
; Exif UNICODE user comments are handled as UCS-2BE/UCS-2LE and JIS as JIS.
; With mbstring support this will automatically be converted into the encoding
; given by corresponding encode setting. When empty mbstring.internal_encoding
; is used. For the decode settings you can distinguish between motorola and
; intel byte order. A decode setting cannot be empty.
; http://php.net/exif.encode-unicode
;exif.encode_unicode = ISO-8859-15
{% if php_cfg.exif is defined and php_cfg.exif.encode_unicode is defined -%}
exif.encode_unicode = {{ php_cfg.exif.encode_unicode }}
{% endif %}

; http://php.net/exif.decode-unicode-motorola
;exif.decode_unicode_motorola = UCS-2BE
{% if php_cfg.exif is defined and php_cfg.exif.decode_unicode_motorola is defined -%}
exif.decode_unicode_motorola = {{ php_cfg.exif.decode_unicode_motorola }}
{% endif %}

; http://php.net/exif.decode-unicode-intel
;exif.decode_unicode_intel    = UCS-2LE
{% if php_cfg.exif is defined and php_cfg.exif.decode_unicode_intel is defined -%}
exif.decode_unicode_intel = {{ php_cfg.exif.decode_unicode_intel }}
{% endif %}

; http://php.net/exif.encode-jis
;exif.encode_jis =
{% if php_cfg.exif is defined and php_cfg.exif.encode_jis is defined -%}
exif.encode_jis = {{ php_cfg.exif.encode_jis }}
{% endif %}

; http://php.net/exif.decode-jis-motorola
;exif.decode_jis_motorola = JIS
{% if php_cfg.exif is defined and php_cfg.exif.decode_jis_motorola is defined -%}
exif.decode_jis_motorola = {{ php_cfg.exif.decode_jis_motorola }}
{% endif %}

; http://php.net/exif.decode-jis-intel
;exif.decode_jis_intel    = JIS
{% if php_cfg.exif is defined and php_cfg.exif.decode_jis_intel is defined -%}
exif.decode_jis_intel = {{ php_cfg.exif.decode_jis_intel }}
{% endif %}

[Tidy]
; The path to a default tidy configuration file to use when using tidy
; http://php.net/tidy.default-config
;tidy.default_config = /usr/local/lib/php/default.tcfg
{% if php_cfg.tidy.decode_jis_intel is defined -%}
tidy.default_config = {{ php_cfg.tidy.default_config }}
{% endif %}

; Should tidy clean and repair output automatically?
; WARNING: Do not use this option if you are generating non-html content
; such as dynamic images
; http://php.net/tidy.clean-output
tidy.clean_output = {{ 'On' if php_cfg.tidy.clean_output else 'Off' }}

[soap]
; Enables or disables WSDL caching feature.
; http://php.net/soap.wsdl-cache-enabled
soap.wsdl_cache_enabled = {{ php_cfg.soap.wsdl_cache_enabled }}

; Sets the directory name where SOAP extension will put cache files.
; http://php.net/soap.wsdl-cache-dir

; RPM note : cache directory must be owned by process owner
; for mod_php, see /etc/httpd/conf.d/php.conf
; for php-fpm, see /etc/php-fpm.d/*conf
soap.wsdl_cache_dir = "{{ php_cfg.soap.wsdl_cache_dir }}"

; (time to live) Sets the number of second while cached file will be used
; instead of original one.
; http://php.net/soap.wsdl-cache-ttl
soap.wsdl_cache_ttl = {{ php_cfg.soap.wsdl_cache_ttl }}

; Sets the size of the cache limit. (Max. number of WSDL files to cache)
soap.wsdl_cache_limit = {{ php_cfg.soap.wsdl_cache_limit }}

[sysvshm]
; A default size of the shared memory segment
;sysvshm.init_mem = 10000
{% if php_cfg.sysvshm is defined and php_cfg.sysvshm.init_mem is defined -%}
sysvshm.init_mem = {{ php_cfg.sysvshm.init_mem }}
{% endif %}

[ldap]
; Sets the maximum number of open links or -1 for unlimited.
ldap.max_links = {{ php_cfg.ldap.max_links }}

[mcrypt]
; For more information about mcrypt settings see http://php.net/mcrypt-module-open

; Directory where to load mcrypt algorithms
; Default: Compiled in into libmcrypt (usually /usr/local/lib/libmcrypt)
;mcrypt.algorithms_dir=
{% if php_cfg.mcrypt is defined and php_cfg.mcrypt.algorithms_dir is defined -%}
mcrypt.algorithms_dir = {{ php_cfg.mcrypt.algorithms_dir }}
{% endif %}

; Directory where to load mcrypt modes
; Default: Compiled in into libmcrypt (usually /usr/local/lib/libmcrypt)
;mcrypt.modes_dir=
{% if php_cfg.mcrypt is defined and php_cfg.mcrypt.modes_dir is defined -%}
mcrypt.modes_dir = {{ php_cfg.mcrypt.modes_dir }}
{% endif %}

[dba]
;dba.default_handler=
{% if php_cfg.dba is defined and php_cfg.dba.default_handler is defined -%}
dba.default_handler = {{ php_cfg.dba.default_handler }}
{% endif %}

[opcache]
; Determines if Zend OPCache is enabled
;opcache.enable=0
{% if php_cfg.opcache is defined and php_cfg.opcache.enable is defined -%}
opcache.enable = {{ 'On' if php_cfg.opcache.enable else 'Off' }}
{% endif %}

; Determines if Zend OPCache is enabled for the CLI version of PHP
;opcache.enable_cli=0
{% if php_cfg.opcache is defined and php_cfg.opcache.enable_cli is defined -%}
opcache.enable_cli = {{ 'On' if php_cfg.opcache.enable_cli else 'Off' }}
{% endif %}

; The OPcache shared memory storage size.
;opcache.memory_consumption=64
{% if php_cfg.opcache is defined and php_cfg.opcache.memory_consumption is defined -%}
opcache.memory_consumption = {{ php_cfg.opcache.memory_consumption }}
{% endif %}

; The amount of memory for interned strings in Mbytes.
;opcache.interned_strings_buffer=4
{% if php_cfg.opcache is defined and php_cfg.opcache.interned_strings_buffer is defined -%}
opcache.interned_strings_buffer = {{ php_cfg.opcache.interned_strings_buffer }}
{% endif %}

; The maximum number of keys (scripts) in the OPcache hash table.
; Only numbers between 200 and 100000 are allowed.
;opcache.max_accelerated_files=2000
{% if php_cfg.opcache is defined and php_cfg.opcache.max_accelerated_files is defined -%}
opcache.max_accelerated_files = {{ php_cfg.opcache.max_accelerated_files }}
{% endif %}

; The maximum percentage of "wasted" memory until a restart is scheduled.
;opcache.max_wasted_percentage=5
{% if php_cfg.opcache is defined and php_cfg.opcache.max_wasted_percentage is defined -%}
opcache.max_wasted_percentage = {{ php_cfg.opcache.max_wasted_percentage }}
{% endif %}

; When this directive is enabled, the OPcache appends the current working
; directory to the script key, thus eliminating possible collisions between
; files with the same name (basename). Disabling the directive improves
; performance, but may break existing applications.
;opcache.use_cwd=1
{% if php_cfg.opcache is defined and php_cfg.opcache.use_cwd is defined -%}
opcache.use_cwd = {{ 'On' if php_cfg.opcache.use_cwd else 'Off' }}
{% endif %}

; When disabled, you must reset the OPcache manually or restart the
; webserver for changes to the filesystem to take effect.
;opcache.validate_timestamps=1
{% if php_cfg.opcache is defined and php_cfg.opcache.validate_timestamps is defined -%}
opcache.validate_timestamps = {{ 'On' if php_cfg.opcache.validate_timestamps else 'Off' }}
{% endif %}

; How often (in seconds) to check file timestamps for changes to the shared
; memory storage allocation. ("1" means validate once per second, but only
; once per request. "0" means always validate)
;opcache.revalidate_freq=2
{% if php_cfg.opcache is defined and php_cfg.opcache.revalidate_freq is defined -%}
opcache.revalidate_freq = {{ php_cfg.opcache.revalidate_freq }}
{% endif %}

; Enables or disables file search in include_path optimization
;opcache.revalidate_path=0
{% if php_cfg.opcache is defined and php_cfg.opcache.revalidate_path is defined -%}
opcache.revalidate_path = {{ 'On' if php_cfg.opcache.revalidate_path else 'Off' }}
{% endif %}

; If disabled, all PHPDoc comments are dropped from the code to reduce the
; size of the optimized code.
;opcache.save_comments=1
{% if php_cfg.opcache is defined and php_cfg.opcache.save_comments is defined -%}
opcache.save_comments = {{ 'On' if php_cfg.opcache.save_comments else 'Off' }}
{% endif %}

; If disabled, PHPDoc comments are not loaded from SHM, so "Doc Comments"
; may be always stored (save_comments=1), but not loaded by applications
; that don't need them anyway.
;opcache.load_comments=1
{% if php_cfg.opcache is defined and php_cfg.opcache.load_comments is defined -%}
opcache.load_comments = {{ 'On' if php_cfg.opcache.load_comments else 'Off' }}
{% endif %}

; If enabled, a fast shutdown sequence is used for the accelerated code
;opcache.fast_shutdown=0
{% if php_cfg.opcache is defined and php_cfg.opcache.fast_shutdown is defined -%}
opcache.fast_shutdown = {{ 'On' if php_cfg.opcache.fast_shutdown else 'Off' }}
{% endif %}

; Allow file existence override (file_exists, etc.) performance feature.
;opcache.enable_file_override=0
{% if php_cfg.opcache is defined and php_cfg.opcache.enable_file_override is defined -%}
opcache.enable_file_override = {{ 'On' if php_cfg.opcache.enable_file_override else 'Off' }}
{% endif %}

; A bitmask, where each bit enables or disables the appropriate OPcache
; passes
;opcache.optimization_level=0xffffffff
{% if php_cfg.opcache is defined and php_cfg.opcache.optimization_level is defined -%}
opcache.optimization_level = {{ php_cfg.opcache.optimization_level }}
{% endif %}

;opcache.inherited_hack=1
{% if php_cfg.opcache is defined and php_cfg.opcache.inherited_hack is defined -%}
opcache.inherited_hack = {{ 'On' if php_cfg.opcache.inherited_hack else 'Off' }}
{% endif %}

;opcache.dups_fix=0
{% if php_cfg.opcache is defined and php_cfg.opcache.dups_fix is defined -%}
opcache.dups_fix = {{ 'On' if php_cfg.opcache.dups_fix else 'Off' }}
{% endif %}

; The location of the OPcache blacklist file (wildcards allowed).
; Each OPcache blacklist file is a text file that holds the names of files
; that should not be accelerated. The file format is to add each filename
; to a new line. The filename may be a full path or just a file prefix
; (i.e., /var/www/x  blacklists all the files and directories in /var/www
; that start with 'x'). Line starting with a ; are ignored (comments).
;opcache.blacklist_filename=
{% if php_cfg.opcache is defined and php_cfg.opcache.blacklist_filename is defined -%}
opcache.blacklist_filename = {{ php_cfg.opcache.blacklist_filename }}
{% endif %}

; Allows exclusion of large files from being cached. By default all files
; are cached.
;opcache.max_file_size=0
{% if php_cfg.opcache is defined and php_cfg.opcache.max_file_size is defined -%}
opcache.max_file_size = {{ php_cfg.opcache.max_file_size }}
{% endif %}

; Check the cache checksum each N requests.
; The default value of "0" means that the checks are disabled.
;opcache.consistency_checks=0
{% if php_cfg.opcache is defined and php_cfg.opcache.consistency_checks is defined -%}
opcache.consistency_checks = {{ php_cfg.opcache.consistency_checks }}
{% endif %}

; How long to wait (in seconds) for a scheduled restart to begin if the cache
; is not being accessed.
;opcache.force_restart_timeout=180
{% if php_cfg.opcache is defined and php_cfg.opcache.force_restart_timeout is defined -%}
opcache.force_restart_timeout = {{ php_cfg.opcache.force_restart_timeout }}
{% endif %}

; OPcache error_log file name. Empty string assumes "stderr".
;opcache.error_log=
{% if php_cfg.opcache is defined and php_cfg.opcache.error_log is defined -%}
opcache.error_log = {{ php_cfg.opcache.error_log }}
{% endif %}

; All OPcache errors go to the Web server log.
; By default, only fatal errors (level 0) or errors (level 1) are logged.
; You can also enable warnings (level 2), info messages (level 3) or
; debug messages (level 4).
;opcache.log_verbosity_level=1
{% if php_cfg.opcache is defined and php_cfg.opcache.log_verbosity_level is defined -%}
opcache.log_verbosity_level = {{ php_cfg.opcache.log_verbosity_level }}
{% endif %}

; Preferred Shared Memory back-end. Leave empty and let the system decide.
;opcache.preferred_memory_model=
{% if php_cfg.opcache is defined and php_cfg.opcache.preferred_memory_model is defined -%}
opcache.preferred_memory_model = {{ php_cfg.opcache.preferred_memory_model }}
{% endif %}

; Protect the shared memory from unexpected writing during script execution.
; Useful for internal debugging only.
;opcache.protect_memory=0
{% if php_cfg.opcache is defined and php_cfg.opcache.protect_memory is defined -%}
opcache.protect_memory = {{ php_cfg.opcache.protect_memory }}
{% endif %}

{% if php_cfg.opcache is defined and php_cfg.opcache.file_update_protection is defined -%}
opcache.file_update_protection = {{ php_cfg.opcache.file_update_protection }}
{% endif %}

{% if php_cfg.opcache is defined and php_cfg.opcache.restrict_api is defined -%}
opcache.restrict_api = {{ php_cfg.opcache.restrict_api }}
{% endif %}

[curl]
; A default value for the CURLOPT_CAINFO option. This is required to be an
; absolute path.
;curl.cainfo =
{% if php_cfg.curl is defined and php_cfg.curl.cainfo is defined -%}
curl.cainfo = {{ php_cfg.curl.cainfo }}
{% endif %}

[openssl]
; The location of a Certificate Authority (CA) file on the local filesystem
; to use when verifying the identity of SSL/TLS peers. Most users should
; not specify a value for this directive as PHP will attempt to use the
; OS-managed cert stores in its absence. If specified, this value may still
; be overridden on a per-stream basis via the "cafile" SSL stream context
; option.
;openssl.cafile=
{% if php_cfg.openssl is defined and php_cfg.openssl.cafile is defined -%}
openssl.cafile = {{ php_cfg.openssl.cafile }}
{% endif %}

; If openssl.cafile is not specified or if the CA file is not found, the
; directory pointed to by openssl.capath is searched for a suitable
; certificate. This value must be a correctly hashed certificate directory.
; Most users should not specify a value for this directive as PHP will
; attempt to use the OS-managed cert stores in its absence. If specified,
; this value may still be overridden on a per-stream basis via the "capath"
; SSL stream context option.
;openssl.capath=
{% if php_cfg.openssl is defined and php_cfg.openssl.capath is defined -%}
openssl.capath = {{ php_cfg.openssl.capath }}
{% endif %}

{% if php_cfg.extra_setting is defined -%}
{{ php_cfg.extra_setting }}
{% endif %}

; Local Variables:
; tab-width: 4
; End:

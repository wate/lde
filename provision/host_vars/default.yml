# --------------
# MariaDBのrootパスワード
# --------------
mariadb_root_password: &db_root_password r00tP455w0rd

# --------------
# PHPのバージョン
#
# 指定可能な値は以下の通り
# - 5.4
# - 5.5
# - 5.6
# - 7.0
# - 7.1
# - 7.2
# --------------
php_version: 7.2

# --------------
# MariaDB用のfirewalld設定
# --------------
mariadb_allow_host: "192.168.33.0/24"

# --------------
# データベース
# --------------
mariadb_databases:
  # 開発用データベース
  - name: app_dev
    password: app_dev_P455w0rd
    hosts:
      - "127.0.0.1"
      - localhost
      - "192.168.33.%"
  # テスト用データベース
  - name: app_test
    # import_data: /vagrant/source/test_data.sql
    password: app_test_P455w0rd
    hosts:
      - "127.0.0.1"
      - localhost
      - "192.168.33.%"
  # ステージング用データベース
  - name: app_staging
    password: app_staging_P455w0rd
    hosts:
      - "127.0.0.1"
      - localhost
      - "192.168.33.%"
  # 本番用データベース
  - name: app_prod
    password: app_prod_P455w0rd
    hosts:
      - "127.0.0.1"
      - localhost
      - "192.168.33.%"
  # WWW SQL Designer用データベース
  - name: wwwsqldesigner
    password: &wwwsqldesigner_db_password wwwsqldesigner_P455w0rd
    hosts:
      - "127.0.0.1"
      - localhost
  - name: xhprof
    password: &xhgui_db_password xhgui_P455w0rd
    hosts:
      - "127.0.0.1"
      - localhost


# --------------
# インストールするPHPのパッケージ
# --------------
php_packages:
  - php
  - php-common
  - php-cli
  - php-devel
  - php-opcache
  - php-mbstring
  - php-mysqlnd
  - php-json
  - php-pdo
  - php-gd
  - php-xml

# --------------
# php.iniの初期値を上書きする項目
# その他の設定値は、「provision/roles/php/defaults/main.yml」の「php_cfg」の項目を参照
# --------------
php_cfg:
  display_errors: yes
  sendmail_path: /usr/local/bin/mhsendmail
  auto_prepend_file: "{{ xhgui_dest + '/external/header.php' if xhgui_dest is defined else '' }}"
  extra_setting: |
    [tideways]
    tideways.auto_prepend_library = 0
    tideways.api_key =
    tideways.auto_start = 1
    tideways.connection = unix:///var/run/tideways/tidewaysd.sock
    tideways.monitor_cli = 0
    tideways.monitor = basic
    tideways.collect = tracing
    tideways.framework =
    tideways.service =
    tideways.timeout = 10000
    tideways.distributed_tracing_hosts = 127.0.0.1
    tideways.udp_connection = 127.0.0.1:8135
    [xdebug]
    xdebug.auto_trace = Off
    xdebug.cli_color = 0
    xdebug.collect_assignments = Off
    xdebug.collect_includes = On
    xdebug.collect_params = 0
    xdebug.collect_return = Off
    xdebug.collect_vars = Off
    xdebug.coverage_enable = On
    xdebug.default_enable = On
    xdebug.dump.COOKIE = ""
    xdebug.dump.ENV = ""
    xdebug.dump.FILES = ""
    xdebug.dump.GET = ""
    xdebug.dump.POST = ""
    xdebug.dump.REQUEST = ""
    xdebug.dump.SERVER = ""
    xdebug.dump.SESSION = ""
    xdebug.dump_globals = On
    xdebug.dump_once = On
    xdebug.dump_undefined = Off
    xdebug.extended_info = On
    xdebug.file_link_format = ""
    xdebug.force_display_errors = Off
    xdebug.force_error_reporting = 0
    xdebug.halt_level = 0
    xdebug.idekey = ""
    xdebug.max_nesting_level = 256
    xdebug.max_stack_frames = -1
    xdebug.overload_var_dump = 2
    xdebug.profiler_aggregate = Off
    xdebug.profiler_append = Off
    xdebug.profiler_enable = Off
    xdebug.profiler_enable_trigger = Off
    xdebug.profiler_enable_trigger_value = ""
    xdebug.profiler_output_dir = /vagrant/output/profile
    xdebug.profiler_output_name = cachegrind.out.%p
    xdebug.remote_addr_header = ""
    xdebug.remote_autostart = Off
    xdebug.remote_connect_back = Off
    xdebug.remote_cookie_expire_time = 3600
    xdebug.remote_enable = Off
    xdebug.remote_handler = dbgp
    xdebug.remote_host = localhost
    xdebug.remote_log = ""
    xdebug.remote_mode = req
    xdebug.remote_port = 9000
    xdebug.scream = Off
    xdebug.show_error_trace = Off
    xdebug.show_exception_trace = Off
    xdebug.show_local_vars = Off
    xdebug.show_mem_delta = Off
    xdebug.trace_enable_trigger = Off
    xdebug.trace_enable_trigger_value = ""
    xdebug.trace_format = 0
    xdebug.trace_options = 0
    xdebug.trace_output_dir = /vagrant/output/trace
    xdebug.trace_output_name = trace.%c
    xdebug.var_display_max_children = 128
    xdebug.var_display_max_data = 512
    xdebug.var_display_max_depth = 3

# --------------
# WWW SQL Designerのバックエンドの設定
# --------------
wwwsqldesigner_backend_pdo_cfg:
  save:
    type: mysql
    dsn: "mysql:dbname=wwwsqldesigner;host=localhost"
    user: wwwsqldesigner
    password: *wwwsqldesigner_db_password
  import:
    type: mysql
    dsn: "mysql:dbname=information_schema;host=localhost"
    user: root
    password: *db_root_password

# --------------
# XHGUIの設定
# --------------
xhgui_cfg:
  dbtype: mysql
  dbhost: localhost
  dbuser: xhprof
  dbpass: *xhgui_db_password
  dbname: xhprof
  dbadapter: Pdo
  servername: "{{ domain }}"
  namespace: myapp
  url: http://profile.{{ domain }}/
  getparam: _profile
  serializer: php
  dot_binary: /usr/bin/dot
  dot_tempdir: /tmp
  dot_errfile: /tmp/xh_dot.err
  display: no
  doprofile: no
  ignoreURLs: []
  ignoreDomains:
    - www.{{ domain }}
    - "{{ domain }}"
  exceptionURLs: []
  exceptionPostURLs:
    - login
  controlIPs: no
  # ignoredFunctions:
  #   - call_user_func
  #   - call_user_func_array
  #   - socket_select


# --------------
# Apacheのバーチャルホストの設定
# --------------
apache_vhosts:
  # ローカルのPCと共有している領域 ( http://www.<ドメイン>/ )
  - name: 00-default
    # サーバー名
    server_name: "{{ domain }}"
    # ドキュメントルート
    document_root: /var/www/html{{ doc_root_suffix|default('', true) }}
    # サーバー名の別名
    server_alias: "www.{{ domain }}"
    # AllowOverrideの設定値
    allow_override: All
    directory_index:
      - index.html
      - index.htm
      - index.php
  # phpMyAdmin用のバーチャルホスト ( http://db.<ドメイン>/ )
  # https://www.phpmyadmin.net/
  - name: 01-phpMyAdmin
    state: "{{ true if phpmyadmin_dest is defined else false }}"
    server_name: db.{{ domain }}
    document_root: "{{ phpmyadmin_dest|default('/usr/share/phpMyAdmin') }}"
    custom_log:
      path: /dev/null
      format: combine
      env: 0
    directory_index:
      - index.html
      - index.htm
      - index.php
    # Optionsの設定値
    options:
      - "-Indexes"
      - "+FollowSymLinks"
    # AllowOverrideの設定値
    allow_override: All
    # Requireの設定値
    require:
      - type: ip
        value: 192.168.33
  # MailHog用のバーチャルホスト ( http://mail.<ドメイン>/ )
  # https://github.com/mailhog/MailHog
  - name: 02-MailHog
    state: "{{ true if mailhog_http_port is defined else false }}"
    server_name: mail.{{ domain }}
    custom_log:
      path: /dev/null
      format: combine
      env: 0
    # リバースプロキシの設定
    proxy_pass:
      - from: /
        to: "http://localhost:{{ mailhog_http_port|default(8025) }}/"
    proxy_pass_reverse:
      - from: /
        to: "http://localhost:{{ mailhog_http_port|default(8025) }}/"
  # WWW SQL Designer用のバーチャルホスト ( http://er.<ドメイン>/ )
  # https://github.com/ondras/wwwsqldesigner
  - name: 03-WWWSQLDesigner
    state: "{{ true if wwwsqldesigner_dest is defined else false }}"
    server_name: er.{{ domain }}
    document_root: "{{ wwwsqldesigner_dest|default('/opt/wwwsqldesigner') }}"
    custom_log:
      path: /dev/null
      format: combine
      env: 0
    directory_index:
      - index.html
      - index.htm
      - index.php
    options:
      - "-Indexes"
      - "+FollowSymLinks"
    allow_override: All
    require:
      - type: ip
        value: 192.168.33
  - name: 04-XHGUI
    state: "{{ true if xhgui_dest is defined else false }}"
    server_name: profile.{{ domain }}
    document_root: "{{ xhgui_dest|default('/opt/xhgui') }}/xhprof_html"
    directory_index:
      - index.html
      - index.htm
      - index.php
    custom_log:
      path: /dev/null
      format: combine
      env: 0

# --------------
# Apacheのバーチャルホストの設定(SSL利用時)
# ※別途「lexiconの設定」および「dehydratedの設定」を要設定
# --------------
# apache_vhosts:
#   # ローカルのPCと共有している領域 ( http://www.<ドメイン>/ )
#   - name: 00-default
#     # サーバー名
#     server_name: "{{ domain }}"
#     # ドキュメントルート
#     directory_index:
#       - index.html
#       - index.htm
#       - index.php
#     document_root: /var/www/html{{ doc_root_suffix|default('', true) }}
#     # サーバー名の別名
#     server_alias: "www.{{ domain }}"
#     # AllowOverrideの設定値
#     allow_override: All
#     ssl:
#       certificate_file: "{{ dehydrated_cert_dir }}/{{ domain }}/cert.pem"
#       certificate_key_file: "{{ dehydrated_cert_dir }}/{{ domain }}/privkey.pem"
#       certificate_chain_file: "{{ dehydrated_cert_dir }}/{{ domain }}/chain.pem"
#   - name: 00-default_http
#     server_name: www.{{ domain }}
#     document_root: /var/www/html
#     server_alias: "{{ domain }}"
#     directory_index:
#       - index.html
#       - index.htm
#       - index.php
#     include:
#       - "{{ apache_snippet_dir }}/redirect_www.conf"
#       - "{{ apache_snippet_dir }}/redirect_https.conf"
#   # phpMyAdmin用のバーチャルホスト ( http://db.<ドメイン>/ )
#   # https://www.phpmyadmin.net/
#   - name: 01-phpMyAdmin
#     state: "{{ true if phpmyadmin_dest is defined else false }}"
#     server_name: db.{{ domain }}
#     document_root: "{{ phpmyadmin_dest|default('/usr/share/phpMyAdmin') }}"
#     directory_index:
#       - index.html
#       - index.htm
#       - index.php
#     # Optionsの設定値
#     options:
#       - "-Indexes"
#       - "+FollowSymLinks"
#     # AllowOverrideの設定値
#     allow_override: All
#     # Requireの設定値
#     require:
#       - type: ip
#         value: 192.168.33
#     ssl:
#       certificate_file: "{{ dehydrated_cert_dir }}/{{ domain }}/cert.pem"
#       certificate_key_file: "{{ dehydrated_cert_dir }}/{{ domain }}/privkey.pem"
#       certificate_chain_file: "{{ dehydrated_cert_dir }}/{{ domain }}/chain.pem"
#   - name: 01-phpMyAdmin_http
#     state: "{{ true if phpmyadmin_dest is defined else false }}"
#     server_name: db.{{ domain }}
#     document_root: "{{ phpmyadmin_dest|default('/usr/share/phpMyAdmin') }}"
#     directory_index:
#       - index.html
#       - index.htm
#       - index.php
#     include:
#       - "{{ apache_snippet_dir }}/redirect_https.conf"
#   # MailHog用のバーチャルホスト ( http://mail.<ドメイン>/ )
#   # https://github.com/mailhog/MailHog
#   - name: 02-MailHog
#     state: "{{ true if mailhog_http_port is defined else false }}"
#     server_name: mail.{{ domain }}
#     # リバースプロキシの設定
#     proxy_pass:
#       - from: /
#         to: "http://localhost:{{ mailcatcher_web_port|default(1080) }}/"
#     proxy_pass_reverse:
#       - from: /
#         to: "http://localhost:{{ mailcatcher_web_port|default(1080) }}/"
#     ssl:
#       certificate_file: "{{ dehydrated_cert_dir }}/{{ domain }}/cert.pem"
#       certificate_key_file: "{{ dehydrated_cert_dir }}/{{ domain }}/privkey.pem"
#       certificate_chain_file: "{{ dehydrated_cert_dir }}/{{ domain }}/chain.pem"
#   - name: 02-MailHog_http
#     state: "{{ true if mailhog_http_port is defined else false }}"
#     server_name: mail.{{ domain }}
#     include:
#       - "{{ apache_snippet_dir }}/redirect_https.conf"
#   # WWW SQL Designer用のバーチャルホスト ( http://er.<ドメイン>/ )
#   # https://github.com/ondras/wwwsqldesigner
#   - name: 03-WWWSQLDesigner
#     state: "{{ true if wwwsqldesigner_dest is defined else false }}"
#     server_name: er.{{ domain }}
#     document_root: "{{ wwwsqldesigner_dest|default('/opt/wwwsqldesigner') }}"
#     directory_index:
#       - index.html
#       - index.htm
#       - index.php
#     options:
#       - "-Indexes"
#       - "+FollowSymLinks"
#     allow_override: All
#     require:
#       - type: ip
#         value: 192.168.33
#     ssl:
#       certificate_file: "{{ dehydrated_cert_dir }}/{{ domain }}/cert.pem"
#       certificate_key_file: "{{ dehydrated_cert_dir }}/{{ domain }}/privkey.pem"
#       certificate_chain_file: "{{ dehydrated_cert_dir }}/{{ domain }}/fullchain.pem"
#   - name: 03-WWWSQLDesigner_http
#     state: "{{ true if wwwsqldesigner_dest is defined else false }}"
#     server_name: er.{{ domain }}
#     include:
#       - "{{ apache_snippet_dir }}/redirect_https.conf"
#   - name: 04-XHGUI
#     state: "{{ true if xhgui_dest is defined else false }}"
#     server_name: profile.{{ domain }}
#     document_root: "{{ xhgui_dest|default('/opt/xhgui') }}/xhprof_html"
#     custom_log:
#       path: /dev/null
#       format: combine
#       env: 0
#     ssl:
#       certificate_file: "{{ dehydrated_cert_dir }}/{{ domain }}/cert.pem"
#       certificate_key_file: "{{ dehydrated_cert_dir }}/{{ domain }}/privkey.pem"
#       certificate_chain_file: "{{ dehydrated_cert_dir }}/{{ domain }}/fullchain.pem"
#   - name: 04-XHGUI_http
#     state: "{{ true if xhgui_dest is defined else false }}"
#     server_name: profile.{{ domain }}
#     include:
#       - "{{ apache_snippet_dir }}/redirect_https.conf"

# --------------
# Apacheの設定
# その他の設定値は、「provision/roles/apache/defaults/main.yml」を参照
# --------------
apache_cfg:
  enable_mmap: no
  enable_sendfile: no

# 不要なモジュールを無効化
apache_module_lua: no
apache_module_dav:
  dav: no
  dav_fs: no
  dav_lock: no
apache_module_lbmethod:
  bybusyness: no
  byrequests: no
  bytraffic: no
  heartbeat: no
apache_module_proxy:
  ajp: no
  balancer: no
  ftp: no

# --------------
# MariaDBの設定
# --------------
mariadb_cfg:
  mysqld:
    slow_query_log: yes
    long_query_time: 1
    # log_warnings: 0
    # min_examined_row_limit: 0
    # log_queries_not_using_indexes: no
    # log_slow_admin_statements: no
    slow_query_log_file: /var/log/mariadb/slow_query.log
    general_log: no
    general_log_file: /var/log/mariadb/general.log

# --------------
# mycliの設定
# --------------
mycli_main_cfg:
  multi_line: false
  syntax_style: monokai
  less_chatty: false
  enable_pager: false

mycli_alias_dsn:
  dev: "mysql://{{ mariadb_databases[0].user|default(mariadb_databases[0].name) }}:{{ mariadb_databases[0].password }}@localhost/{{ mariadb_databases[0].name }}"
  test: "mysql://{{ mariadb_databases[1].user|default(mariadb_databases[1].name) }}:{{ mariadb_databases[1].password }}@localhost/{{ mariadb_databases[1].name }}"
  staging: "mysql://{{ mariadb_databases[2].user|default(mariadb_databases[2].name) }}:{{ mariadb_databases[2].password }}@localhost/{{ mariadb_databases[2].name }}"
  prod: "mysql://{{ mariadb_databases[3].user|default(mariadb_databases[3].name) }}:{{ mariadb_databases[3].password }}@localhost/{{ mariadb_databases[3].name }}"


# --------------
# lexiconの設定
# --------------
## lexiconプロバイダー(cloudflare / route53 / vultr / sakuracloud )
# lexicon_provider: cloudflare

## CloudflareのAPI情報
# cloudflare_email: "{{ lookup('env','CLOUDFLARE_EMAIL') }}"
# cloudflare_token: "{{ lookup('env','CLOUDFLARE_TOKEN') }}"

## AWS Route53のAPI情報
# aws_access_key: "{{ lookup('env','AWS_ACCESS_KEY_ID') }}"
# aws_access_secret: "{{ lookup('env','AWS_SECRET_ACCESS_KEY') }}"

## VultrのAPI情報
# vultr_token: "{{ lookup('env','VULTR_TOKEN') }}"

## さくらクラウドのAPI情報
# sakuracloud_token: "{{ lookup('env','SAKURACLOUD_ACCESS_TOKEN') }}"
# sakuracloud_secret: "{{ lookup('env','SAKURACLOUD_ACCESS_TOKEN_SECRET') }}"

# --------------
# dehydratedの設定
# --------------
# dehydrated_cfg:
#   challengetype: dns-01
#
# dehydrated_hook_initialize: |
#   export PROVIDER="{{ lexicon_provider }}"
#   export LEXICON_CLOUDFLARE_USERNAME="{{ cloudflare_email }}"
#   export LEXICON_CLOUDFLARE_TOKEN="{{ cloudflare_token }}"
#   export LEXICON_ROUTE53_ACCESS_KEY="{{ aws_access_key }}"
#   export LEXICON_ROUTE53_ACCESS_SECRET="{{ aws_access_secret }}"
#   export LEXICON_VULTR_TOKEN="{{ vultr_token }}"
#   export LEXICON_SAKURACLOUD_TOKEN="{{ sakuracloud_token }}"
#   export LEXICON_SAKURACLOUD_SECRET="{{ sakuracloud_secret }}"
#
# dehydrated_hook_deploy_challenge: |
#   lexicon ${PROVIDER} create ${DOMAIN} TXT --name="_acme-challenge.${DOMAIN}." --content="${TOKEN_VALUE}"
#   sleep 30
#
# dehydrated_hook_clean_challenge: |
#   lexicon ${PROVIDER} delete ${DOMAIN} TXT --name="_acme-challenge.${DOMAIN}." --content="${TOKEN_VALUE}"
#
# dehydrated_domains:
#   - name: "{{ domain }}"
#     domains:
#       - "{{ domain }}"
#       - "*.{{ domain }}"
#
# dehydrated_auto_execute: yes

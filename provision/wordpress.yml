- name: set wp-cli config variable
  set_fact:
    wp_cli_cfg:
      path: /var/www/html
      "core download":
        locale: "{{ wordpress.locale | default('ja') }}"
        version: "{{ wordpress.version | default('latest') }}"
      "config create":
        dbname: "{{ mariadb_databases[0].name }}"
        dbuser: "{{ mariadb_databases[0].user | default(mariadb_databases[0].name) }}"
        dbpass: "{{ mariadb_databases[0].password }}"
        dbcharset: "{{ mariadb_databases[0].encoding | default(mariadb_default_charset) }}"
        dbcollate: "{{ mariadb_databases[0].collation | default(mariadb_default_collation) }}"
      "core install":
        url: "{{ apache_vhosts[0].server_name }}"
        title: "{{ wordpress.title }}"
        admin_user: "{{ wordpress.admin_user }}"
        admin_password: "{{ wordpress.admin_password }}"
        admin_email: "{{ wordpress.admin_email }}"
      "core update":
        locale: "{{ wordpress.locale | default('ja') }}"
- name: create wp-cli config directory
  file:
    path: ~/.wp-cli
    state: directory
- name: create wp-cli config file
  blockinfile:
    path: ~/.wp-cli/config.yml
    block: "{{ wp_cli_cfg | to_nice_yaml }}"
    create: true
- name: download WordPress
  command: /usr/local/bin/wp core download
  args:
    creates: /var/www/html/wp-config-sample.php
    chdir: /var/www/html
- name: create WordPress config file
  command: /usr/local/bin/wp config create
  args:
    creates: /var/www/html/wp-config.php
    chdir: /var/www/html
- name: add WordPress extra config
  blockinfile:
    marker: "/* {mark} ANSIBLE MANAGED BLOCK */"
    path: /var/www/html/wp-config.php
    insertafter: "\\$table_prefix ="
    block: "{{ wordpress.extra_setting }}"
- name: check WordPress installed
  shell: /usr/local/bin/wp core is-installed &> /dev/null
  ignore_errors: true
  changed_when: false
  register: result
- name: install WordPress
  command: /usr/local/bin/wp core install
  when: result.rc > 0
- name: create .htaccess
  blockinfile:
    path: "/var/www/html/.htaccess"
    create: true
    block: "{{ wordpress.htaccess }}"
- name: set WordPress options
  command: /usr/local/bin/wp option update {{ item.key }} '{{ item.value }}'
  with_dict: "{{ wordpress.options | default({}) }}"
- name: set WordPress site setting
  command: /usr/local/bin/wp option update {{ item }} 'http://{{ apache_vhosts[0].server_name }}'
  with_items:
    - siteurl
    - home
- name: install WordPress plugins
  command: /usr/local/bin/wp plugin install {{ item.name }} {{ plugin_version }}
  args:
    creates: "/var/www/html/wp-content/plugins/{{ item.name }}"
    chdir: /var/www/html
  vars:
    plugin_version: "{{ '--version=' + item.version if item.version | default(None) else '' }}"
  with_items: "{{ wordpress.plugins }}"
- name: Activates/Deactivates plugin status
  command: /usr/local/bin/wp plugin {{ 'activate' if item.activate|default(false) else 'deactivate' }} {{ item.name }}
  with_items: "{{ wordpress.plugins }}"
- name: install WordPress themes
  command: /usr/local/bin/wp theme install {{ item.name }} {{ theme_activate_state }} {{ theme_version }}
  args:
    creates: "/var/www/html/wp-content/themes/{{ item.name }}"
  vars:
    theme_version: "{{ '--version=' + item.version if item.version | default(None) else '' }}"
    theme_activate_state: "{{ '--activate' if item.activate|default(false) else '' }}"
  with_items: "{{ wordpress.themes }}"
- name: set WordPress rewrite rules
  block:
    - name: update permalink structure
      command: /usr/local/bin/wp rewrite structure '{{ wordpress.rewrite_structure }}'
    - name: flush rewrite rules
      command: /usr/local/bin/wp rewrite flush
  when: wordpress.rewrite_structure is defined
- name: import WordPress data
  block:
    - name: install wordpress-importer plugin
      command: /usr/local/bin/wp plugin install wordpress-importer --activate
    - name: download import data
      get_url:
        url: "{{ wordpress.import.file }}"
        dest: /tmp/worepress_import_data.xml
      when: wordpress.import.file.startswith('http://') or wordpress.import.file.startswith('https://')
    - name: upload import data
      copy:
        src: "{{ wordpress.import.file }}"
        dest: /tmp/worepress_import_data.xml
      when:
        - not wordpress.import.file.startswith('http://')
        - not wordpress.import.file.startswith('https://')
    - name: upload user mapping file
      copy:
        src: "{{ wordpress.import.file }}"
        dest: /tmp/worepress_user_mapping.csv
      when: not wordpress.import.authors in ['create', 'skip']
    - name: import data
      command: /usr/local/bin/wp import /tmp/worepress_import_data.xml --authors={{ import_author }}
      vars:
        import_author: "{{ wordpress.import.authors if wordpress.import.authors in ['create', 'skip'] else '/tmp/worepress_user_mapping.csv' }}"
  when: wordpress.import is defined
- name: change permission for uploads directory
  file:
    path: /var/www/html/wp-content/uploads
    state: directory
    recurse: true
    mode: "0707"
- name: get boilerplate
  block:
    - name: check index file
      stat:
        path: /vagrant/source/index.php
      register: result
    - block:
        - name: generate request param
          set_fact:
            request_params:
              - underscoresme_generate=1
              - underscoresme_slug={{ wordpress.boilerplate.slug|urlencode }}
              - underscoresme_name={{ wordpress.boilerplate.name|urlencode }}
              - underscoresme_author={{ wordpress.boilerplate.author|default('', true)|urlencode }}
              - underscoresme_author_uri={{ wordpress.boilerplate.author_uri|default('', true)|urlencode }}
              - underscoresme_description={{ wordpress.boilerplate.description|default('', true)|urlencode }}
        - name: add WooCommerce param
          set_fact:
            request_params: "{{ request_params }} + [ 'underscoresme_woocommerce=1' ]"
          when:
            - wordpress.boilerplate.woocommerce is defined
            - wordpress.boilerplate.woocommerce
        - name: add sassify param
          set_fact:
            request_params: "{{ request_params }} + [ 'underscoresme_sass=1' ]"
          when:
            - wordpress.boilerplate.sassify is defined
            - wordpress.boilerplate.sassify
        - name: unarchive boilerplate file
          unarchive:
            src: https://underscores.me/?{{ request_params|join('&') }}
            dest: /tmp
            remote_src: true
        - name: move boilerplate files to shared directory
          shell: mv * /vagrant/source/
          args:
            chdir: "/tmp/{{ wordpress.boilerplate.slug }}"
      when: not result.stat.exists
  when:
    - app_type == 'wordpress_theme'
    - wordpress.use_boilerplate
